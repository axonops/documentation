{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to AxonOps Documentation Introduction AxonOps is an extensible operational management tool initially built for Apache Cassandra (https://cassandra.apache.org). It is currently being extended to manage Apache Kafka (http://kafka.apache.org), Elasticsearch (https://www.elastic.co/products/elasticsearch), and others. Features Simple deployment model Dashboarding metrics, logs, and healthchecks Integrates with ChatOps tools - Slack, PagerDuty etc. Highly efficient metrics collection and storage Domain aware functionalities, including Cassandra repairs and backups.","title":"Introduction"},{"location":"#welcome-to-axonops-documentation","text":"","title":"Welcome to AxonOps Documentation"},{"location":"#introduction","text":"AxonOps is an extensible operational management tool initially built for Apache Cassandra (https://cassandra.apache.org). It is currently being extended to manage Apache Kafka (http://kafka.apache.org), Elasticsearch (https://www.elastic.co/products/elasticsearch), and others.","title":"Introduction"},{"location":"#features","text":"Simple deployment model Dashboarding metrics, logs, and healthchecks Integrates with ChatOps tools - Slack, PagerDuty etc. Highly efficient metrics collection and storage Domain aware functionalities, including Cassandra repairs and backups.","title":"Features"},{"location":"configuration/agent-configuration/","text":"Configuring AxonOps Agent Work in progress","title":"Agent Configuration"},{"location":"configuration/agent-configuration/#configuring-axonops-agent","text":"Work in progress","title":"Configuring AxonOps Agent"},{"location":"configuration/server-configuration/","text":"Configuring AxonOps Server Work in progress","title":"Server Configuration"},{"location":"configuration/server-configuration/#configuring-axonops-server","text":"Work in progress","title":"Configuring AxonOps Server"},{"location":"how-to/backup-restore-notifications/","text":"Setup Backup - Restore Notications On the Axonops application menu, click Operations -> Backups -> Setup and select Notificationsg tab. Notification Severities . For each notifications severity Info Warning Error you can either use the slider to use the default routing or use the icon to customize the notification integrations. Notice: not available when default routing selected Customize notifications To customize notifications click on select the integrations that you require and click Close . Noticed that the Warning Integration were customized. You can remove these by clicking the . If you want to remove default routing groups from a severity and create custom groups , use the slider bar to remove default routing click the and follow this steps If you do not require any notifications ensure the default routing is off and delete any previously created custom notification.","title":"Setup Backup-Restore Notifications"},{"location":"how-to/backup-restore-notifications/#setup-backup-restore-notications","text":"On the Axonops application menu, click Operations -> Backups -> Setup and select Notificationsg tab. Notification Severities . For each notifications severity Info Warning Error you can either use the slider to use the default routing or use the icon to customize the notification integrations. Notice: not available when default routing selected","title":"Setup Backup - Restore Notications"},{"location":"how-to/default-routing/","text":"Setup Default Routing Deafult Routing. Allows you to set up the channels though which alerts notifications will be received and the specific groups that will receive the alerts notifications On the Axonops application menu, select Alert & Notifications -> Integration and select Default Routing tab. 3 Alert Notification types can be set up Info Warning Error To setup Default routing for info click on Select the desired group(s) from the dropdown menu for the desired integrations(s) Click to confirm selections The group should now appear in the Info box on the Default Routing Tab Repeat these steps to setup the Default Routing for Warning and Error. To Edit Default Routing click on the icon on either Add or Remove existing integrations using the dropdown menus. To Remove a group click on the Delete icon","title":"Setup Default Routing"},{"location":"how-to/default-routing/#setup-default-routing","text":"Deafult Routing. Allows you to set up the channels though which alerts notifications will be received and the specific groups that will receive the alerts notifications On the Axonops application menu, select Alert & Notifications -> Integration and select Default Routing tab. 3 Alert Notification types can be set up Info Warning Error","title":"Setup Default Routing"},{"location":"how-to/setup-alert-rules/","text":"Setup alert rules Insert Alert Rules credentials On the Axonops application menu, click Dashboards and select required Dashboard . eg. System Hover over the desired Chart click on the button. Complete the fields in form Below the chart click on the alert tab. A form will appear Complete Alert settings in Comparator Warning value or Critical value or Both and the Duration ==> (how often to check) In Annotations In the Summary box you can include free text type one or many of the following $labels $labels : - cluster - dc - hostname - org - rack - type - keyspace $value : In the Description box you can include free along with one or many of the above $labels Example CPU usage per DC Alerts usage on {{ $labels.hostname }} and cluster {{$labels.cluster}} Using the slider bar you can select any Integrations Then click on the Info , Warning , Error icons, to select the group(s) of Integrations for the alert. Not selecting integrations If you do not select any specific Integrations the Alert will automatically follow the Global Dashboard Routing or if this has not been setup the Default Routing Integrations. Edit - Delete and Aler rule Edit Alert Rule On the Axonops application menu, click Alerts Notifications and click Active. Select the Alert Rules tab and click To Delete An Alert Either... On the Axonops application menu, click Dashboards and select required Dashboard . eg. System Hover over the desired Chart click on the button. Below the chart click on the alert tab and click on the of the alert rule you want to remove. Or... On the Axonops application menu, click Alerts Notifications and click Active. Select the Alert Rules tab and click","title":"Setup Alert Rules"},{"location":"how-to/setup-alert-rules/#setup-alert-rules","text":"","title":"Setup alert rules"},{"location":"how-to/setup-dashboards-global-integrations/","text":"Setup Dashboards Global Integrations On the Axonops application menu, click Alerts Notifications -> Active and select Dashboards Global Routing tab. Notification Severities . For each notifications severity Info Warning Error you can either use the slider to use the default routing or use the icon to customize the notification integrations. Notice: not available when default routing selected Customize notifications To customize notifications click on select the integrations that you require and click Close . Noticed that the Warning Integration were customized. You can remove these by clicking the . If you want to remove default routing groups from a severity and create custom groups , use the slider bar to remove default routing click the and follow this steps If you do not require any notifications ensure the default routing is off and delete any previously created custom notification.","title":"Setup Dashboards-Global Integrations"},{"location":"how-to/setup-dashboards-global-integrations/#setup-dashboards-global-integrations","text":"On the Axonops application menu, click Alerts Notifications -> Active and select Dashboards Global Routing tab. Notification Severities . For each notifications severity Info Warning Error you can either use the slider to use the default routing or use the icon to customize the notification integrations. Notice: not available when default routing selected","title":"Setup Dashboards Global Integrations"},{"location":"how-to/setup-healthcheks/","text":"Setup Healthcheks On the Axonops application menu, click Healthchecks and select Setup tab. Add HealthCheck Services Create service(s) Below there few examples copy and Paste inside. and click save { \"shellchecks\": [ { \"name\" : \"check_cassandra_statusbinary\" , \"shell\" : \"/bin/bash\" , \"script\": \"/var/lib/cassandra_checks/check_cassandra_statusbinary.sh\" , \"interval\": \"5m\" , \"timeout\": \"1m\" } ], \"httpchecks\": [ { \"name\" : \"cassandra\" , \"http\" : \"http://localhost:9042\" , \"tls_skip_verify\": true , \"method\": \"GET\" , \"interval\": \"10s\" , \"timeout\": \"1m\" }, { \"name\" : \"cassandra\" , \"http\" : \"http://localhost:9916\" , \"tls_skip_verify\": true , \"method\": \"GET\" , \"interval\": \"10s\" , \"timeout\": \"1m\" } ], \"tcpchecks\": [ { \"name\" : \"tcp_cassandra\" , \"tcp\" : \"http://localhost:9042\" , \"interval\": \"30s\" , \"timeout\": \"1m\" }, { \"name\" : \"tcp_cassandra\" , \"tcp\" : \"http://localhost:9200\" , \"interval\": \"5m\" , \"timeout\": \"1m\" } ] } delete service(s) To Delete a service copy and Paste inside. and click save { \"shellchecks\": [], \"httpchecks\": [], \"tcpchecks\": [] }","title":"Setup Healthcheks"},{"location":"how-to/setup-healthcheks/#setup-healthcheks","text":"On the Axonops application menu, click Healthchecks and select Setup tab.","title":"Setup Healthcheks"},{"location":"installation/agents/installing-centos/","text":"Installing on RPM-based Linux (CentOS, Fedora, OpenSuse, RedHat) Java Agent Installation Description Download Stable for CentOS / Fedora / OpenSuse / Redhat Linux x86-64 Stable for CentOS / Fedora / OpenSuse / Redhat Linux ARM64 Stable for CentOS / Fedora / OpenSuse / Redhat Linux ARMv7 Install Stable Before installing java agent , you need to make sure you have ... and ... \u2013 ... up and running. You can verify if you're already good to go with the following commands: .. --version # ... 2.7.13 ... --version # ... 9.0.1 Installing and verifying java agent is as simple as: sudo yum install rpm package url Example: sudo yum install https://dl.java-agent.com/oss/release/java-agent-5.4.2-1.x86_64.rpm Or install manually using rpm. First execute wget rpm package url Example: wget https://dl.java-agent.com/oss/release/java-agent-5.4.2-1.x86_64.rpm On CentOS / Fedora / Redhat: sudo yum install initscripts fontconfig sudo rpm -Uvh local rpm package On OpenSuse: sudo rpm -i --nodeps local rpm package Install via YUM Repository Add the following to a new file at /etc/yum.repos.d/axonops.repo [java-agent] name=axonagent baseurl=https://packages.javaagent.com/oss/rpm repo_gpgcheck=1 enabled=1 gpgcheck=1 gpgkey=https://packages.javaagent.com/gpg.key sslverify=1 sslcacert=/etc/pki/tls/certs/ca-bundle.crt There is a separate repository if you want beta releases. [java-agent] name=axonagent baseurl=https://packages.javaagent.com/oss/rpm-beta repo_gpgcheck=1 enabled=1 gpgcheck=1 gpgkey=https://packages.javaagent.com/gpg.key sslverify=1 sslcacert=/etc/pki/tls/certs/ca-bundle.crt Then install Grafana via the yum command. sudo yum install java-agent RPM GPG Key The RPMs are signed, you can verify the signature with this public GPG key . Create a file /etc/apt/sources.list.d/java_agent.list and add the following to it. Cloning from GitHub Java agent can also be used without a system-wide installation by cloning the repository into a subfolder of your project's root directory: git clone https://github . com/squidfunk/axonops . git This is especially useful if you want to extend the app and override some parts of the app. The app will reside in the folder path-to/folder . Package details Installs binary to /usr/sbin/java-agent Installs Init.d script to /etc/init.d/java-agent Creates default file (environment vars) to /etc/default/java-agent Installs configuration file to /etc/java_agent/java_agent.ini Installs systemd service (if systemd is available) name java-agent.agent The default configuration sets the log file at /var/log/java_agent/java_agent.log Using Docker If you're familiar with Docker, the official Docker image for Material comes with all dependencies pre-installed and ready-to-use with the latest version published on PyPI, packaged in a very small image. Pull it with: docker pull squidfunk/mkdocs-material The axonops executable is provided as an entrypoint, serve is the default command. Start the development agent in your project root with: docker run --rm -it -p 8000 :8000 -v ${ PWD } :/docs squidfunk/mkdocs-material If you're using Windows command prompt ( cmd.exe ), substitute ${PWD} with \"%cd%\" . Start the agent (init.d service) Start Java Agent by running: sudo service java-agent start This will start the java-agent process as the java-agent user, which was created during the package installation. To configure the java agent to start at boot time: sudo /sbin/chkconfig --add java-agent Start the Java Agent (init.d service) To start the service using systemd: systemctl daemon-reload systemctl start java-agent systemctl status java-agent Enable the systemd service so that java agent starts at boot. sudo systemctl enable java-agent . service Environment file The systemd service file and init.d script both use the file located at /etc/default/java-agent for environment variables used when starting the agent. Here you can override log directory, data directory and other variables. Logging By default Java Agent will log to /var/log/java_agent Axon Agent Installation Description Download Stable for CentOS / Fedora / OpenSuse / Redhat Linux x86-64 Stable for CentOS / Fedora / OpenSuse / Redhat Linux ARM64 Stable for CentOS / Fedora / OpenSuse / Redhat Linux ARMv7 Install Stable Before installing axon agent , you need to make sure you have ... and ... \u2013 ... up and running. You can verify if you're already good to go with the following commands: .. --version # ... 2.7.13 ... --version # ... 9.0.1 Installing and verifying axon agent is as simple as: sudo yum install rpm package url Example: sudo yum install https://dl.axon-agent.com/oss/release/axon-agent-5.4.2-1.x86_64.rpm Or install manually using rpm. First execute wget rpm package url Example: wget https://dl.axon-agent.com/oss/release/axon-agent-5.4.2-1.x86_64.rpm On CentOS / Fedora / Redhat: sudo yum install initscripts fontconfig sudo rpm -Uvh local rpm package On OpenSuse: sudo rpm -i --nodeps local rpm package Install via YUM Repository Add the following to a new file at /etc/yum.repos.d/axonops.repo [axon-agent] name=axonagent baseurl=https://packages.axonagent.com/oss/rpm repo_gpgcheck=1 enabled=1 gpgcheck=1 gpgkey=https://packages.axonagent.com/gpg.key sslverify=1 sslcacert=/etc/pki/tls/certs/ca-bundle.crt There is a separate repository if you want beta releases. [axon-agent] name=axonagent baseurl=https://packages.axonagent.com/oss/rpm-beta repo_gpgcheck=1 enabled=1 gpgcheck=1 gpgkey=https://packages.axonagent.com/gpg.key sslverify=1 sslcacert=/etc/pki/tls/certs/ca-bundle.crt Then install Grafana via the yum command. sudo yum install axon-agent RPM GPG Key The RPMs are signed, you can verify the signature with this public GPG key . Create a file /etc/apt/sources.list.d/axon_agent.list and add the following to it. Cloning from GitHub Axon agent can also be used without a system-wide installation by cloning the repository into a subfolder of your project's root directory: git clone https://github . com/squidfunk/axonops . git This is especially useful if you want to extend the app and override some parts of the app. The app will reside in the folder path-to/folder . Package details Installs binary to /usr/sbin/axon-agent Installs Init.d script to /etc/init.d/axon-agent Creates default file (environment vars) to /etc/default/axon-agent Installs configuration file to /etc/axon_agent/axon_agent.ini Installs systemd service (if systemd is available) name axon-agent.agent The default configuration sets the log file at /var/log/axon_agent/axon_agent.log Using Docker If you're familiar with Docker, the official Docker image for Material comes with all dependencies pre-installed and ready-to-use with the latest version published on PyPI, packaged in a very small image. Pull it with: docker pull squidfunk/mkdocs-material The axonops executable is provided as an entrypoint, serve is the default command. Start the development agent in your project root with: docker run --rm -it -p 8000 :8000 -v ${ PWD } :/docs squidfunk/mkdocs-material If you're using Windows command prompt ( cmd.exe ), substitute ${PWD} with \"%cd%\" . Start the agent (init.d service) Start Axon Agent by running: sudo service axon-agent start This will start the axon-agent process as the axon-agent user, which was created during the package installation. To configure the axon agent to start at boot time: sudo /sbin/chkconfig --add axon-agent Start the Axon Agent (init.d service) To start the service using systemd: systemctl daemon-reload systemctl start axon-agent systemctl status axon-agent Enable the systemd service so that axon agent starts at boot. sudo systemctl enable axon-agent . service Environment file The systemd service file and init.d script both use the file located at /etc/default/axon-agent for environment variables used when starting the agent. Here you can override log directory, data directory and other variables. Logging By default Axon Agent will log to /var/log/axon_agent","title":"Installing on Centos/Redhat"},{"location":"installation/agents/installing-centos/#installing-on-rpm-based-linux-centos-fedora-opensuse-redhat","text":"","title":"Installing on RPM-based Linux (CentOS, Fedora, OpenSuse, RedHat)"},{"location":"installation/agents/installing-centos/#java-agent-installation","text":"Description Download Stable for CentOS / Fedora / OpenSuse / Redhat Linux x86-64 Stable for CentOS / Fedora / OpenSuse / Redhat Linux ARM64 Stable for CentOS / Fedora / OpenSuse / Redhat Linux ARMv7","title":"Java Agent Installation"},{"location":"installation/agents/installing-centos/#install-stable","text":"Before installing java agent , you need to make sure you have ... and ... \u2013 ... up and running. You can verify if you're already good to go with the following commands: .. --version # ... 2.7.13 ... --version # ... 9.0.1 Installing and verifying java agent is as simple as: sudo yum install rpm package url Example: sudo yum install https://dl.java-agent.com/oss/release/java-agent-5.4.2-1.x86_64.rpm Or install manually using rpm. First execute wget rpm package url Example: wget https://dl.java-agent.com/oss/release/java-agent-5.4.2-1.x86_64.rpm","title":"Install Stable"},{"location":"installation/agents/installing-centos/#on-centos-fedora-redhat","text":"sudo yum install initscripts fontconfig sudo rpm -Uvh local rpm package","title":"On CentOS / Fedora / Redhat:"},{"location":"installation/agents/installing-centos/#on-opensuse","text":"sudo rpm -i --nodeps local rpm package","title":"On OpenSuse:"},{"location":"installation/agents/installing-centos/#install-via-yum-repository","text":"Add the following to a new file at /etc/yum.repos.d/axonops.repo [java-agent] name=axonagent baseurl=https://packages.javaagent.com/oss/rpm repo_gpgcheck=1 enabled=1 gpgcheck=1 gpgkey=https://packages.javaagent.com/gpg.key sslverify=1 sslcacert=/etc/pki/tls/certs/ca-bundle.crt There is a separate repository if you want beta releases. [java-agent] name=axonagent baseurl=https://packages.javaagent.com/oss/rpm-beta repo_gpgcheck=1 enabled=1 gpgcheck=1 gpgkey=https://packages.javaagent.com/gpg.key sslverify=1 sslcacert=/etc/pki/tls/certs/ca-bundle.crt Then install Grafana via the yum command. sudo yum install java-agent","title":"Install via YUM Repository"},{"location":"installation/agents/installing-centos/#rpm-gpg-key","text":"The RPMs are signed, you can verify the signature with this public GPG key . Create a file /etc/apt/sources.list.d/java_agent.list and add the following to it.","title":"RPM GPG Key"},{"location":"installation/agents/installing-centos/#cloning-from-github","text":"Java agent can also be used without a system-wide installation by cloning the repository into a subfolder of your project's root directory: git clone https://github . com/squidfunk/axonops . git This is especially useful if you want to extend the app and override some parts of the app. The app will reside in the folder path-to/folder .","title":"Cloning from GitHub"},{"location":"installation/agents/installing-centos/#package-details","text":"Installs binary to /usr/sbin/java-agent Installs Init.d script to /etc/init.d/java-agent Creates default file (environment vars) to /etc/default/java-agent Installs configuration file to /etc/java_agent/java_agent.ini Installs systemd service (if systemd is available) name java-agent.agent The default configuration sets the log file at /var/log/java_agent/java_agent.log","title":"Package details"},{"location":"installation/agents/installing-centos/#using-docker","text":"If you're familiar with Docker, the official Docker image for Material comes with all dependencies pre-installed and ready-to-use with the latest version published on PyPI, packaged in a very small image. Pull it with: docker pull squidfunk/mkdocs-material The axonops executable is provided as an entrypoint, serve is the default command. Start the development agent in your project root with: docker run --rm -it -p 8000 :8000 -v ${ PWD } :/docs squidfunk/mkdocs-material If you're using Windows command prompt ( cmd.exe ), substitute ${PWD} with \"%cd%\" .","title":"Using Docker"},{"location":"installation/agents/installing-centos/#start-the-agent-initd-service","text":"Start Java Agent by running: sudo service java-agent start This will start the java-agent process as the java-agent user, which was created during the package installation. To configure the java agent to start at boot time: sudo /sbin/chkconfig --add java-agent","title":"Start the agent (init.d service)"},{"location":"installation/agents/installing-centos/#start-the-java-agent-initd-service","text":"To start the service using systemd: systemctl daemon-reload systemctl start java-agent systemctl status java-agent Enable the systemd service so that java agent starts at boot. sudo systemctl enable java-agent . service","title":"Start the Java Agent (init.d service)"},{"location":"installation/agents/installing-centos/#environment-file","text":"The systemd service file and init.d script both use the file located at /etc/default/java-agent for environment variables used when starting the agent. Here you can override log directory, data directory and other variables.","title":"Environment file"},{"location":"installation/agents/installing-centos/#logging","text":"By default Java Agent will log to /var/log/java_agent","title":"Logging"},{"location":"installation/agents/installing-centos/#axon-agent-installation","text":"Description Download Stable for CentOS / Fedora / OpenSuse / Redhat Linux x86-64 Stable for CentOS / Fedora / OpenSuse / Redhat Linux ARM64 Stable for CentOS / Fedora / OpenSuse / Redhat Linux ARMv7","title":"Axon Agent Installation"},{"location":"installation/agents/installing-centos/#install-stable_1","text":"Before installing axon agent , you need to make sure you have ... and ... \u2013 ... up and running. You can verify if you're already good to go with the following commands: .. --version # ... 2.7.13 ... --version # ... 9.0.1 Installing and verifying axon agent is as simple as: sudo yum install rpm package url Example: sudo yum install https://dl.axon-agent.com/oss/release/axon-agent-5.4.2-1.x86_64.rpm Or install manually using rpm. First execute wget rpm package url Example: wget https://dl.axon-agent.com/oss/release/axon-agent-5.4.2-1.x86_64.rpm","title":"Install Stable"},{"location":"installation/agents/installing-centos/#on-centos-fedora-redhat_1","text":"sudo yum install initscripts fontconfig sudo rpm -Uvh local rpm package","title":"On CentOS / Fedora / Redhat:"},{"location":"installation/agents/installing-centos/#on-opensuse_1","text":"sudo rpm -i --nodeps local rpm package","title":"On OpenSuse:"},{"location":"installation/agents/installing-centos/#install-via-yum-repository_1","text":"Add the following to a new file at /etc/yum.repos.d/axonops.repo [axon-agent] name=axonagent baseurl=https://packages.axonagent.com/oss/rpm repo_gpgcheck=1 enabled=1 gpgcheck=1 gpgkey=https://packages.axonagent.com/gpg.key sslverify=1 sslcacert=/etc/pki/tls/certs/ca-bundle.crt There is a separate repository if you want beta releases. [axon-agent] name=axonagent baseurl=https://packages.axonagent.com/oss/rpm-beta repo_gpgcheck=1 enabled=1 gpgcheck=1 gpgkey=https://packages.axonagent.com/gpg.key sslverify=1 sslcacert=/etc/pki/tls/certs/ca-bundle.crt Then install Grafana via the yum command. sudo yum install axon-agent","title":"Install via YUM Repository"},{"location":"installation/agents/installing-centos/#rpm-gpg-key_1","text":"The RPMs are signed, you can verify the signature with this public GPG key . Create a file /etc/apt/sources.list.d/axon_agent.list and add the following to it.","title":"RPM GPG Key"},{"location":"installation/agents/installing-centos/#cloning-from-github_1","text":"Axon agent can also be used without a system-wide installation by cloning the repository into a subfolder of your project's root directory: git clone https://github . com/squidfunk/axonops . git This is especially useful if you want to extend the app and override some parts of the app. The app will reside in the folder path-to/folder .","title":"Cloning from GitHub"},{"location":"installation/agents/installing-centos/#package-details_1","text":"Installs binary to /usr/sbin/axon-agent Installs Init.d script to /etc/init.d/axon-agent Creates default file (environment vars) to /etc/default/axon-agent Installs configuration file to /etc/axon_agent/axon_agent.ini Installs systemd service (if systemd is available) name axon-agent.agent The default configuration sets the log file at /var/log/axon_agent/axon_agent.log","title":"Package details"},{"location":"installation/agents/installing-centos/#using-docker_1","text":"If you're familiar with Docker, the official Docker image for Material comes with all dependencies pre-installed and ready-to-use with the latest version published on PyPI, packaged in a very small image. Pull it with: docker pull squidfunk/mkdocs-material The axonops executable is provided as an entrypoint, serve is the default command. Start the development agent in your project root with: docker run --rm -it -p 8000 :8000 -v ${ PWD } :/docs squidfunk/mkdocs-material If you're using Windows command prompt ( cmd.exe ), substitute ${PWD} with \"%cd%\" .","title":"Using Docker"},{"location":"installation/agents/installing-centos/#start-the-agent-initd-service_1","text":"Start Axon Agent by running: sudo service axon-agent start This will start the axon-agent process as the axon-agent user, which was created during the package installation. To configure the axon agent to start at boot time: sudo /sbin/chkconfig --add axon-agent","title":"Start the agent (init.d service)"},{"location":"installation/agents/installing-centos/#start-the-axon-agent-initd-service","text":"To start the service using systemd: systemctl daemon-reload systemctl start axon-agent systemctl status axon-agent Enable the systemd service so that axon agent starts at boot. sudo systemctl enable axon-agent . service","title":"Start the Axon Agent (init.d service)"},{"location":"installation/agents/installing-centos/#environment-file_1","text":"The systemd service file and init.d script both use the file located at /etc/default/axon-agent for environment variables used when starting the agent. Here you can override log directory, data directory and other variables.","title":"Environment file"},{"location":"installation/agents/installing-centos/#logging_1","text":"By default Axon Agent will log to /var/log/axon_agent","title":"Logging"},{"location":"installation/agents/installing-ubuntu/","text":"Installing on Debian / Ubuntu Java Agent Installation Description Download Stable for Debian-based Linux x86-64 Stable for Debian-based Linux ARM64 Stable for Debian-based Linux ARMv7 Install Stable Before installing java agent , you need to make sure you have ... and ... \u2013 ... up and running. You can verify if you're already good to go with the following commands: .. --version # ... 2.7.13 ... --version # ... 9.0.1 Installing and verifying java agent is as simple as: wget debian package url sudo apt-get install -y adduser libfontconfig sudo dpkg -i java_agent version _amd64.deb Example wget https://url/dl.java_agent.4.2_amd64.deb sudo apt-get install -y adduser libfontconfig sudo dpkg -i java_agent_5.4.2_amd64.deb APT Repository Create a file /etc/apt/sources.list.d/java_agent.list and add the following to it. deb https://packages.axonops.java_agent.com/oss/deb stable main There is a separate repository if you want beta releases. deb https://packages.axonops.java_agent.com/oss/deb beta main Use the above line even if you are on Ubuntu or another Debian version. Then add our gpg key. This allows you to install signed packages. curl https://packages.axonops.java_agent.com/gpg.key | sudo apt-key add - Update your Apt repositories and install agent sudo apt-get update sudo apt-get install axonops_java_agent On some older versions of Ubuntu and Debian you may need to install the apt-transport-https package which is needed to fetch packages over HTTPS. sudo apt-get install -y apt-transport-https Cloning from GitHub AxonOps Server can also be used without a system-wide installation by cloning the repository into a subfolder of your project's root directory: git clone https://github . com/squidfunk/axonops . git This is especially useful if you want to extend the app and override some parts of the app. The app will reside in the folder path-to/folder . Package details Installs binary to /usr/sbin/java-agent Installs Init.d script to /etc/init.d/java-agent Creates default file (environment vars) to /etc/default/java-agent Installs configuration file to /etc/java_agent/java_agent.ini Installs systemd service (if systemd is available) name java-server.agent The default configuration sets the log file at /var/log/java_agent/java_agent.log Using Docker If you're familiar with Docker, the official Docker image for Material comes with all dependencies pre-installed and ready-to-use with the latest version published on PyPI, packaged in a very small image. Pull it with: docker pull squidfunk/mkdocs-material The axonops executable is provided as an entrypoint, serve is the default command. Start the development server in your project root with: docker run --rm -it -p 8000 :8000 -v ${ PWD } :/docs squidfunk/mkdocs-material If you're using Windows command prompt ( cmd.exe ), substitute ${PWD} with \"%cd%\" . Start the server (init.d service) Start Java Agent by running: sudo service java-server start This will start the java-server process as the java-server user, which was created during the package installation. To configure the java server to start at boot time: sudo update-rc . d java-agent defaults Start the Java Agent (init.d service) To start the service using systemd: systemctl daemon-reload systemctl start java-agent systemctl status java-agent Enable the systemd service so that java agent starts at boot. sudo systemctl enable java-agent . service Environment file The systemd service file and init.d script both use the file located at /etc/default/java-agent for environment variables used when starting the agent. Here you can override log directory, data directory and other variables. Logging By default Java Agent will log to /var/log/java_agent Axonops Agent Installation Description Download Stable for Debian-based Linux x86-64 Stable for Debian-based Linux ARM64 Stable for Debian-based Linux ARMv7 Install Stable Before installing axon-agent , you need to make sure you have ... and ... \u2013 ... up and running. You can verify if you're already good to go with the following commands: .. --version # ... 2.7.13 ... --version # ... 9.0.1 Installing and verifying axon-agent: wget debian package url sudo apt-get install -y adduser libfontconfig sudo dpkg -i axon-agent version _amd64.deb Example wget https://url/dl.axon-agent.4.2_amd64.deb sudo apt-get install -y adduser libfontconfig sudo dpkg -i axon-agent.4.2_amd64.deb APT Repository Create a file /etc/apt/sources.list.d/axon-agent.list and add the following to it. deb https://packages.axonops.axon-agent.com/oss/deb stable main There is a separate repository if you want beta releases. deb https://packages.axonops.axon-agent.com/oss/deb beta main Use the above line even if you are on Ubuntu or another Debian version. Then add our gpg key. This allows you to install signed packages. curl https://packages.axonops.axon-agent.com/gpg.key | sudo apt-key add - Update your Apt repositories and install agent sudo apt-get update sudo apt-get install axonops_axon-agent On some older versions of Ubuntu and Debian you may need to install the apt-transport-https package which is needed to fetch packages over HTTPS. sudo apt-get install -y apt-transport-https Cloning from GitHub Node Server can also be used without a system-wide installation by cloning the repository into a subfolder of your project's root directory: git clone https://github . com/squidfunk/axon-agent . git This is especially useful if you want to extend the app and override some parts of the app. The app will reside in the folder path-to/folder . Package details Installs binary to /usr/sbin/axon-agent Installs Init.d script to /etc/init.d/axon-agent Creates default file (environment vars) to /etc/default/axon-agent Installs configuration file to /etc/java_agent/axon-agent.ini Installs systemd service (if systemd is available) name node-server.agent The default configuration sets the log file at /var/log/axon-agent/axon-agent.log Using Docker If you're familiar with Docker, the official Docker image for Material comes with all dependencies pre-installed and ready-to-use with the latest version published on PyPI, packaged in a very small image. Pull it with: docker pull squidfunk/mkdocs-material The axonops executable is provided as an entrypoint, serve is the default command. Start the development server in your project root with: docker run --rm -it -p 8000 :8000 -v ${ PWD } :/docs squidfunk/mkdocs-material If you're using Windows command prompt ( cmd.exe ), substitute ${PWD} with \"%cd%\" . Start the server (init.d service) Start Node Agent by running: sudo service node-server start This will start the node-server process as the node-server user, which was created during the package installation. To configure the node server to start at boot time: sudo update-rc . d axon-agent defaults Start the Node Agent (init.d service) To start the service using systemd: systemctl daemon-reload systemctl start axon-agent systemctl status axon-agent Enable the systemd service so that axon-agent starts at boot. sudo systemctl enable axon-agent . service Environment file The systemd service file and init.d script both use the file located at /etc/default/axon-agent for environment variables used when starting the agent. Here you can override log directory, data directory and other variables. Logging By default Java Agent will log to /var/log/axon-agent","title":"Installing on Ubuntu/Debian"},{"location":"installation/agents/installing-ubuntu/#installing-on-debian-ubuntu","text":"","title":"Installing on Debian / Ubuntu"},{"location":"installation/agents/installing-ubuntu/#java-agent-installation","text":"Description Download Stable for Debian-based Linux x86-64 Stable for Debian-based Linux ARM64 Stable for Debian-based Linux ARMv7","title":"Java Agent Installation"},{"location":"installation/agents/installing-ubuntu/#install-stable","text":"Before installing java agent , you need to make sure you have ... and ... \u2013 ... up and running. You can verify if you're already good to go with the following commands: .. --version # ... 2.7.13 ... --version # ... 9.0.1 Installing and verifying java agent is as simple as: wget debian package url sudo apt-get install -y adduser libfontconfig sudo dpkg -i java_agent version _amd64.deb Example wget https://url/dl.java_agent.4.2_amd64.deb sudo apt-get install -y adduser libfontconfig sudo dpkg -i java_agent_5.4.2_amd64.deb","title":"Install Stable"},{"location":"installation/agents/installing-ubuntu/#apt-repository","text":"Create a file /etc/apt/sources.list.d/java_agent.list and add the following to it. deb https://packages.axonops.java_agent.com/oss/deb stable main There is a separate repository if you want beta releases. deb https://packages.axonops.java_agent.com/oss/deb beta main Use the above line even if you are on Ubuntu or another Debian version. Then add our gpg key. This allows you to install signed packages. curl https://packages.axonops.java_agent.com/gpg.key | sudo apt-key add - Update your Apt repositories and install agent sudo apt-get update sudo apt-get install axonops_java_agent On some older versions of Ubuntu and Debian you may need to install the apt-transport-https package which is needed to fetch packages over HTTPS. sudo apt-get install -y apt-transport-https","title":"APT Repository"},{"location":"installation/agents/installing-ubuntu/#cloning-from-github","text":"AxonOps Server can also be used without a system-wide installation by cloning the repository into a subfolder of your project's root directory: git clone https://github . com/squidfunk/axonops . git This is especially useful if you want to extend the app and override some parts of the app. The app will reside in the folder path-to/folder .","title":"Cloning from GitHub"},{"location":"installation/agents/installing-ubuntu/#package-details","text":"Installs binary to /usr/sbin/java-agent Installs Init.d script to /etc/init.d/java-agent Creates default file (environment vars) to /etc/default/java-agent Installs configuration file to /etc/java_agent/java_agent.ini Installs systemd service (if systemd is available) name java-server.agent The default configuration sets the log file at /var/log/java_agent/java_agent.log","title":"Package details"},{"location":"installation/agents/installing-ubuntu/#using-docker","text":"If you're familiar with Docker, the official Docker image for Material comes with all dependencies pre-installed and ready-to-use with the latest version published on PyPI, packaged in a very small image. Pull it with: docker pull squidfunk/mkdocs-material The axonops executable is provided as an entrypoint, serve is the default command. Start the development server in your project root with: docker run --rm -it -p 8000 :8000 -v ${ PWD } :/docs squidfunk/mkdocs-material If you're using Windows command prompt ( cmd.exe ), substitute ${PWD} with \"%cd%\" .","title":"Using Docker"},{"location":"installation/agents/installing-ubuntu/#start-the-server-initd-service","text":"Start Java Agent by running: sudo service java-server start This will start the java-server process as the java-server user, which was created during the package installation. To configure the java server to start at boot time: sudo update-rc . d java-agent defaults","title":"Start the server (init.d service)"},{"location":"installation/agents/installing-ubuntu/#start-the-java-agent-initd-service","text":"To start the service using systemd: systemctl daemon-reload systemctl start java-agent systemctl status java-agent Enable the systemd service so that java agent starts at boot. sudo systemctl enable java-agent . service","title":"Start the Java Agent (init.d service)"},{"location":"installation/agents/installing-ubuntu/#environment-file","text":"The systemd service file and init.d script both use the file located at /etc/default/java-agent for environment variables used when starting the agent. Here you can override log directory, data directory and other variables.","title":"Environment file"},{"location":"installation/agents/installing-ubuntu/#logging","text":"By default Java Agent will log to /var/log/java_agent","title":"Logging"},{"location":"installation/agents/installing-ubuntu/#axonops-agent-installation","text":"Description Download Stable for Debian-based Linux x86-64 Stable for Debian-based Linux ARM64 Stable for Debian-based Linux ARMv7","title":"Axonops Agent Installation"},{"location":"installation/agents/installing-ubuntu/#install-stable_1","text":"Before installing axon-agent , you need to make sure you have ... and ... \u2013 ... up and running. You can verify if you're already good to go with the following commands: .. --version # ... 2.7.13 ... --version # ... 9.0.1 Installing and verifying axon-agent: wget debian package url sudo apt-get install -y adduser libfontconfig sudo dpkg -i axon-agent version _amd64.deb Example wget https://url/dl.axon-agent.4.2_amd64.deb sudo apt-get install -y adduser libfontconfig sudo dpkg -i axon-agent.4.2_amd64.deb","title":"Install Stable"},{"location":"installation/agents/installing-ubuntu/#apt-repository_1","text":"Create a file /etc/apt/sources.list.d/axon-agent.list and add the following to it. deb https://packages.axonops.axon-agent.com/oss/deb stable main There is a separate repository if you want beta releases. deb https://packages.axonops.axon-agent.com/oss/deb beta main Use the above line even if you are on Ubuntu or another Debian version. Then add our gpg key. This allows you to install signed packages. curl https://packages.axonops.axon-agent.com/gpg.key | sudo apt-key add - Update your Apt repositories and install agent sudo apt-get update sudo apt-get install axonops_axon-agent On some older versions of Ubuntu and Debian you may need to install the apt-transport-https package which is needed to fetch packages over HTTPS. sudo apt-get install -y apt-transport-https","title":"APT Repository"},{"location":"installation/agents/installing-ubuntu/#cloning-from-github_1","text":"Node Server can also be used without a system-wide installation by cloning the repository into a subfolder of your project's root directory: git clone https://github . com/squidfunk/axon-agent . git This is especially useful if you want to extend the app and override some parts of the app. The app will reside in the folder path-to/folder .","title":"Cloning from GitHub"},{"location":"installation/agents/installing-ubuntu/#package-details_1","text":"Installs binary to /usr/sbin/axon-agent Installs Init.d script to /etc/init.d/axon-agent Creates default file (environment vars) to /etc/default/axon-agent Installs configuration file to /etc/java_agent/axon-agent.ini Installs systemd service (if systemd is available) name node-server.agent The default configuration sets the log file at /var/log/axon-agent/axon-agent.log","title":"Package details"},{"location":"installation/agents/installing-ubuntu/#using-docker_1","text":"If you're familiar with Docker, the official Docker image for Material comes with all dependencies pre-installed and ready-to-use with the latest version published on PyPI, packaged in a very small image. Pull it with: docker pull squidfunk/mkdocs-material The axonops executable is provided as an entrypoint, serve is the default command. Start the development server in your project root with: docker run --rm -it -p 8000 :8000 -v ${ PWD } :/docs squidfunk/mkdocs-material If you're using Windows command prompt ( cmd.exe ), substitute ${PWD} with \"%cd%\" .","title":"Using Docker"},{"location":"installation/agents/installing-ubuntu/#start-the-server-initd-service_1","text":"Start Node Agent by running: sudo service node-server start This will start the node-server process as the node-server user, which was created during the package installation. To configure the node server to start at boot time: sudo update-rc . d axon-agent defaults","title":"Start the server (init.d service)"},{"location":"installation/agents/installing-ubuntu/#start-the-node-agent-initd-service","text":"To start the service using systemd: systemctl daemon-reload systemctl start axon-agent systemctl status axon-agent Enable the systemd service so that axon-agent starts at boot. sudo systemctl enable axon-agent . service","title":"Start the Node Agent (init.d service)"},{"location":"installation/agents/installing-ubuntu/#environment-file_1","text":"The systemd service file and init.d script both use the file located at /etc/default/axon-agent for environment variables used when starting the agent. Here you can override log directory, data directory and other variables.","title":"Environment file"},{"location":"installation/agents/installing-ubuntu/#logging_1","text":"By default Java Agent will log to /var/log/axon-agent","title":"Logging"},{"location":"installation/server/installing-centos/","text":"Getting started Installation Installing AxonOps Server Before installing AxonOps Server , you need to make sure you have ... and ... \u2013 ... up and running. You can verify if you're already good to go with the following commands: .. --version # ... 2.7.13 ... --version # ... 9.0.1 Installing and verifying AxonOps Server is as simple as: apt-get install axonops axonops --version # axonops, version 0.17.1 AxonOps Server requires Agent = 0.17.1. Installing Agent using apt-get Agent can be installed with apt-get : apt-get install java-agent using other methods you're on Windows you can use Link to install Method : apt-get install axonops-server This will install all required dependencies like something and something else . cloning from GitHub AxonOps Server can also be used without a system-wide installation by cloning the repository into a subfolder of your project's root directory: git clone https://github.com/squidfunk/axonops.git This is especially useful if you want to extend the app and override some parts of the app. The app will reside in the folder path-to/folder . Troubleshooting Installation on macOS When you're running the pre-installed version of Python on macOS,, axonops tries to install packages in a folder for which your user might not have the adequate permissions. There are two possible solutions for this: Installing in user space (recommended): Provide the --user flag to the install command and axonops will install the package in a user-site location. This is the recommended way. Switching to a homebrewed Python : Upgrade your Python installation to a self-contained solution by installing Python with Homebrew. This should eliminate a lot of problems you may be having with axonops . Error: unrecognized theme 'axonops' If you run into this error, the most common reason is that you installed AxonOps Server through some package manager (e.g. Homebrew or apt-get ) and the Material theme through pip , so both packages end up in different locations. AxonOps only checks its install location for themes. Alternative: Using Docker If you're familiar with Docker, the official Docker image for Material comes with all dependencies pre-installed and ready-to-use with the latest version published on PyPI, packaged in a very small image. Pull it with: docker pull squidfunk/mkdocs-material The axonops executable is provided as an entrypoint, serve is the default command. Start the development server in your project root with: docker run --rm -it -p 8000:8000 -v ${PWD}:/docs squidfunk/mkdocs-material If you're using Windows command prompt ( cmd.exe ), substitute ${PWD} with \"%cd%\" . Usage In order to run axonops server just add one of the following lines to your project's config.yml . If you installed Axonops using a package manager: MQTT : endpoints : RESTConfig : host : 0.0.0.0 port : 8080 elastic_host : localhost elastic_port : 9200 alerting : notification_interval : 3h notification_endpoints : axonops_host : http://localhost:3000/ axonops_logo : https://digitalis.io/wp-content/uploads/2018/11/slack_axonops.png axonops_website : https://www.axonops.com/ backup : localRetentionDurationDays : 30 Axonops server includes a development server, so you can review your changes as you go. The development server can be started with the following command: ./axonops Now you can point your browser to http://localhost:3000 and the Material theme should be visible. From here on, you can start writing your documentation, or read on and customize the theme. Configuration Color palette A default hue is defined for every primary and accent color on Google's Material Design [color palette][10], which makes it very easy to change the overall look of the theme. Just set the primary and accent colors using the following variables: theme : palette : primary : indigo accent : indigo","title":"Installing on Centos/Redhat"},{"location":"installation/server/installing-centos/#getting-started","text":"","title":"Getting started"},{"location":"installation/server/installing-centos/#installation","text":"","title":"Installation"},{"location":"installation/server/installing-centos/#installing-axonops-server","text":"Before installing AxonOps Server , you need to make sure you have ... and ... \u2013 ... up and running. You can verify if you're already good to go with the following commands: .. --version # ... 2.7.13 ... --version # ... 9.0.1 Installing and verifying AxonOps Server is as simple as: apt-get install axonops axonops --version # axonops, version 0.17.1 AxonOps Server requires Agent = 0.17.1.","title":"Installing AxonOps Server"},{"location":"installation/server/installing-centos/#installing-agent","text":"","title":"Installing Agent"},{"location":"installation/server/installing-centos/#using-apt-get","text":"Agent can be installed with apt-get : apt-get install java-agent","title":"using apt-get"},{"location":"installation/server/installing-centos/#using-other-methods","text":"you're on Windows you can use Link to install Method : apt-get install axonops-server This will install all required dependencies like something and something else .","title":"using other methods"},{"location":"installation/server/installing-centos/#cloning-from-github","text":"AxonOps Server can also be used without a system-wide installation by cloning the repository into a subfolder of your project's root directory: git clone https://github.com/squidfunk/axonops.git This is especially useful if you want to extend the app and override some parts of the app. The app will reside in the folder path-to/folder .","title":"cloning from GitHub"},{"location":"installation/server/installing-centos/#troubleshooting","text":"Installation on macOS When you're running the pre-installed version of Python on macOS,, axonops tries to install packages in a folder for which your user might not have the adequate permissions. There are two possible solutions for this: Installing in user space (recommended): Provide the --user flag to the install command and axonops will install the package in a user-site location. This is the recommended way. Switching to a homebrewed Python : Upgrade your Python installation to a self-contained solution by installing Python with Homebrew. This should eliminate a lot of problems you may be having with axonops . Error: unrecognized theme 'axonops' If you run into this error, the most common reason is that you installed AxonOps Server through some package manager (e.g. Homebrew or apt-get ) and the Material theme through pip , so both packages end up in different locations. AxonOps only checks its install location for themes.","title":"Troubleshooting"},{"location":"installation/server/installing-centos/#alternative-using-docker","text":"If you're familiar with Docker, the official Docker image for Material comes with all dependencies pre-installed and ready-to-use with the latest version published on PyPI, packaged in a very small image. Pull it with: docker pull squidfunk/mkdocs-material The axonops executable is provided as an entrypoint, serve is the default command. Start the development server in your project root with: docker run --rm -it -p 8000:8000 -v ${PWD}:/docs squidfunk/mkdocs-material If you're using Windows command prompt ( cmd.exe ), substitute ${PWD} with \"%cd%\" .","title":"Alternative: Using Docker"},{"location":"installation/server/installing-centos/#usage","text":"In order to run axonops server just add one of the following lines to your project's config.yml . If you installed Axonops using a package manager: MQTT : endpoints : RESTConfig : host : 0.0.0.0 port : 8080 elastic_host : localhost elastic_port : 9200 alerting : notification_interval : 3h notification_endpoints : axonops_host : http://localhost:3000/ axonops_logo : https://digitalis.io/wp-content/uploads/2018/11/slack_axonops.png axonops_website : https://www.axonops.com/ backup : localRetentionDurationDays : 30 Axonops server includes a development server, so you can review your changes as you go. The development server can be started with the following command: ./axonops Now you can point your browser to http://localhost:3000 and the Material theme should be visible. From here on, you can start writing your documentation, or read on and customize the theme.","title":"Usage"},{"location":"installation/server/installing-centos/#configuration","text":"","title":"Configuration"},{"location":"installation/server/installing-centos/#color-palette","text":"A default hue is defined for every primary and accent color on Google's Material Design [color palette][10], which makes it very easy to change the overall look of the theme. Just set the primary and accent colors using the following variables: theme : palette : primary : indigo accent : indigo","title":"Color palette"},{"location":"installation/server/installing-ubuntu/","text":"Installing AxonOps Agent Work in progress Cassandra","title":"Installing on Ubuntu/Debian"},{"location":"installation/server/installing-ubuntu/#installing-axonops-agent","text":"Work in progress","title":"Installing AxonOps Agent"},{"location":"installation/server/installing-ubuntu/#cassandra","text":"","title":"Cassandra"},{"location":"integrations/email-integration/","text":"Setup Email Insert Email credentials On the Axonops application menu, select Alert & Notifications -> Integration . On the Setup menu, move the cusror over the email icon and click on the Add symbol Complete the fields in the pop-up form Enter the form fields and click Inserting recipient emails To enter a recipient email, enter the email address followed by either: Space : \u2423 . (recommended) Enter : \"\u21b5\" . Click and close the pop-up form, should now read Installed . To Edit email click on To Delete email click on To Remove Emails groups move the cusror over the email icon click on the Delete symbol and Confirm","title":"Email Integration"},{"location":"integrations/email-integration/#setup-email","text":"","title":"Setup Email"},{"location":"integrations/overview/","text":"Overview","title":"Overview"},{"location":"integrations/overview/#overview","text":"","title":"Overview"},{"location":"integrations/pagerduy-integration/","text":"Setup Pagerduty Create pagerduty routing key. Using these steps. Please note down the pagerduty routing key Insert pagerduty routing key. On the Axonops application menu, select Alert & Notifications -> Integration . On the Setup menu, move the cursor over the pagerduty icon and click on the Add symbol Complete the fields in the pop-up form Enter Group name routing key from step 1 . and click To add additional routing keys click on , enter the additional routing key and click To remove any routing key click on Click and close the pop-up form, on the Integrations Menu the Pagerduty Icon should now read Installed . To Edit any routing key click on and press to remove specific routing key or to remove group of keys and click To Remove pagerduty groups move the cusror over the pagerduty icon click on the Delete symbol and Confirm","title":"PagerDuty Integration"},{"location":"integrations/pagerduy-integration/#setup-pagerduty","text":"","title":"Setup Pagerduty"},{"location":"integrations/slack-integration/","text":"Setup Slack Create Slack incoming WebHooks. Go to Slack Application On the side menu click In search box type Incoming Webhooks From the App directory click Install on Incoming WebHooks App. Click Add Configuration In Post to Channel Box select an option from the choose a channel dropdown menu . Click Add Incoming WebHooks Integration Copy and make a note of the WebHook URL that appears in the Setup Instructions . Insert Slack WebHook URL. On the Axonops application menu, select Alert & Notifications -> Integration . On the Setup menu, move the cursor over the slack icon and click on the Add symbol Complete the fields in the pop-up form Enter Group name WebHook URL from step 1 . and click To add additional WebHook URLs click on , enter the additional WebHook URL and click To remove any WebHook URL click on Click and close the pop-up form, on the Integrtions Menu the Slack Icon should now read Installed . To Edit any WebHook URL click on and press to remove specific WebHook URL or to remove group of keys and click To Remove Slack groups move the cusror over the pagerduty icon click on the Delete symbol and Confirm","title":"Slack Integration"},{"location":"integrations/slack-integration/#setup-slack","text":"","title":"Setup Slack"},{"location":"overview/architecture/","text":"Architecture Work in progress","title":"Architecture"},{"location":"overview/architecture/#architecture","text":"Work in progress","title":"Architecture"},{"location":"overview/motivation/","text":"Motivation Work in progress","title":"Motivation"},{"location":"overview/motivation/#motivation","text":"Work in progress","title":"Motivation"}]}