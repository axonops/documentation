{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to AxonOps Documentation Introduction AxonOps is an extensible operational management tool initially built for Apache Cassandra (https://cassandra.apache.org). It is currently being extended to manage Apache Kafka (http://kafka.apache.org), Elasticsearch (https://www.elastic.co/products/elasticsearch), and others. Features Simple deployment model Dashboarding metrics, logs, and healthchecks Integrates with ChatOps tools - Slack, PagerDuty etc. Highly efficient metrics collection and storage Domain aware functionalities, including Cassandra repairs and backups.","title":"Introduction"},{"location":"#welcome-to-axonops-documentation","text":"","title":"Welcome to AxonOps Documentation"},{"location":"#introduction","text":"AxonOps is an extensible operational management tool initially built for Apache Cassandra (https://cassandra.apache.org). It is currently being extended to manage Apache Kafka (http://kafka.apache.org), Elasticsearch (https://www.elastic.co/products/elasticsearch), and others.","title":"Introduction"},{"location":"#features","text":"Simple deployment model Dashboarding metrics, logs, and healthchecks Integrates with ChatOps tools - Slack, PagerDuty etc. Highly efficient metrics collection and storage Domain aware functionalities, including Cassandra repairs and backups.","title":"Features"},{"location":"cluster/cluster-overview/","text":"Cluster Overview is the home page and provides an overview of your cluster health, including OS , Cassandra and JVM . Viewing cluster overview On the Axonops application menu, select Cluster Overview . Infomy click on Datacenter name to view the information for OS , Cassandra , JVM . a pop-up menu will appear with all the details. Infomy OS Details Infomy Cassandra Details Infomy JVM Details Infomy","title":"Cluster Overview"},{"location":"cluster/cluster-overview/#viewing-cluster-overview","text":"On the Axonops application menu, select Cluster Overview . Infomy click on Datacenter name to view the information for OS , Cassandra , JVM . a pop-up menu will appear with all the details. Infomy","title":"Viewing cluster overview"},{"location":"cluster/cluster-overview/#os-details","text":"Infomy","title":"OS Details"},{"location":"cluster/cluster-overview/#cassandra-details","text":"Infomy","title":"Cassandra Details"},{"location":"cluster/cluster-overview/#jvm-details","text":"Infomy","title":"JVM Details"},{"location":"configuration/agent-configuration/","text":"Configuring AxonOps Agent Work in progress","title":"AxonOps Agent Configuration"},{"location":"configuration/agent-configuration/#configuring-axonops-agent","text":"Work in progress","title":"Configuring AxonOps Agent"},{"location":"configuration/axondash/","text":"Configuring AxonOps Agent Work in progress","title":"AxonOps GUI Service Configuration"},{"location":"configuration/axondash/#configuring-axonops-agent","text":"Work in progress","title":"Configuring AxonOps Agent"},{"location":"configuration/server-configuration/","text":"Configuring AxonOps Server Work in progress","title":"AxonOps Server Configuration"},{"location":"configuration/server-configuration/#configuring-axonops-server","text":"Work in progress","title":"Configuring AxonOps Server"},{"location":"how-to/backup-restore-notifications/","text":"Setup Backup - Restore Notications On the Axonops application menu, click Operations - Backups - Setup and select Notifications tab. Notification Severities. Notification Severities. For each notifications severity Info Warning Error you can either use the slider to use the default routing or use the icon to customize the notification integrations. Notice: not available when default routing selected Infomy Customize Notifications. To customize notifications click on select the integrations that you require and click Close . Infomy Noticed: The Warning Integration were customized. You can remove these by clicking the . If you want to remove default routing groups from a severity and create custom groups , use the slider bar to remove default routing click the and follow this steps If you do not require any notifications ensure the default routing is off and delete any previously created custom notification. Infomy","title":"Setup Backup-Restore Notifications"},{"location":"how-to/backup-restore-notifications/#setup-backup-restore-notications","text":"On the Axonops application menu, click Operations - Backups - Setup and select Notifications tab.","title":"Setup Backup - Restore Notications"},{"location":"how-to/backup-restore-notifications/#notification-severities","text":"Notification Severities. For each notifications severity Info Warning Error you can either use the slider to use the default routing or use the icon to customize the notification integrations. Notice: not available when default routing selected Infomy","title":"Notification Severities."},{"location":"how-to/backup-restore-notifications/#customize-notifications","text":"To customize notifications click on select the integrations that you require and click Close . Infomy Noticed: The Warning Integration were customized. You can remove these by clicking the . If you want to remove default routing groups from a severity and create custom groups , use the slider bar to remove default routing click the and follow this steps If you do not require any notifications ensure the default routing is off and delete any previously created custom notification. Infomy","title":"Customize Notifications."},{"location":"how-to/default-routing/","text":"Setup Default Routing Deafult Routing. Allows you to set up the channels though which alerts notifications will be received and the specific groups that will receive the alerts notifications Setup Default Routing On the Axonops application menu, select Alert Notifications - Integration and select Default Routing tab. Alert Notification types can be set up Infomy Info Warning Error Info To Setup Default Routing For Info click On Select the desired group(s) from the dropdown menu for the desired integrations(s) and click` to confirm selections Infomy The group should now appear in the Info Info box on the Default Routing Tab Infomy Warning - Error Repeat these steps to setup the Default Routing for Warning Error Edit Default Routing To Edit Default Routing click on the icon on either Add or Remove existing integrations using the dropdown menus. Delete Default Routing To Remove a group click on the Delete icon Infomy","title":"Setup Default Routing"},{"location":"how-to/default-routing/#setup-default-routing","text":"Deafult Routing. Allows you to set up the channels though which alerts notifications will be received and the specific groups that will receive the alerts notifications","title":"Setup Default Routing"},{"location":"how-to/default-routing/#setup-default-routing_1","text":"On the Axonops application menu, select Alert Notifications - Integration and select Default Routing tab. Alert Notification types can be set up Infomy Info Warning Error","title":"Setup Default Routing"},{"location":"how-to/default-routing/#info","text":"To Setup Default Routing For Info click On Select the desired group(s) from the dropdown menu for the desired integrations(s) and click` to confirm selections Infomy The group should now appear in the Info Info box on the Default Routing Tab Infomy","title":"Info"},{"location":"how-to/default-routing/#warning-error","text":"Repeat these steps to setup the Default Routing for Warning Error","title":"Warning - Error"},{"location":"how-to/default-routing/#edit-default-routing","text":"To Edit Default Routing click on the icon on either Add or Remove existing integrations using the dropdown menus.","title":"Edit Default Routing"},{"location":"how-to/default-routing/#delete-default-routing","text":"To Remove a group click on the Delete icon Infomy","title":"Delete Default Routing"},{"location":"how-to/setup-alert-rules/","text":"Setup alert rules Insert Alert Rules Credentials On the Axonops application menu, click Dashboards and select required Dashboard. eg. System Hover over the desired Chart click on the button. Infomy Complete The Fields In Form Below the chart click on the alert tab. Infomy A form will appear Infomy Complete Alert settings in Comparator Warning value or Critical value or Both and the Duration == (how often to check) In Infomy Annotations In the Summary box you can include free text type one or many of the following $labels $labels : - cluster - dc - hostname - org - rack - type - keyspace $value : In the Description box you can include free along with one or many of the above $labels Example CPU usage per DC Alerts usage on {{ $labels.hostname }} and cluster {{$labels.cluster}} Infomy Integrations Using the slider bar you can select any Integrations . Then click on the Info , Warning , Error icons, to select the group(s) of Integrations for the alert. Infomy Not selecting integrations If you do not select any specific Integrations the Alert will automatically follow the Global Dashboard Routing or if this has not been setup the Default Routing Integrations. Edit Alert Rule On the Axonops application menu, click Alerts Notifications and click Active. Select the Alert Rules tab and click Infomy Delete Alert Rule(s) To Delete An Alert Either... On the Axonops application menu, click Dashboards and select required Dashboard. eg. System Hover over the desired Chart click on the button. Below the chart click on the alert tab and click on the of the alert rule you want to remove. OR... On the Axonops application menu, click Alerts Notifications and click Active. Select the Alert Rules tab and click Infomy","title":"Setup Alert Rules"},{"location":"how-to/setup-alert-rules/#setup-alert-rules","text":"","title":"Setup alert rules"},{"location":"how-to/setup-alert-rules/#insert-alert-rules-credentials","text":"On the Axonops application menu, click Dashboards and select required Dashboard. eg. System Hover over the desired Chart click on the button. Infomy","title":"Insert Alert Rules Credentials"},{"location":"how-to/setup-alert-rules/#complete-the-fields-in-form","text":"Below the chart click on the alert tab. Infomy A form will appear Infomy Complete Alert settings in Comparator Warning value or Critical value or Both and the Duration == (how often to check) In Infomy","title":"Complete The Fields In Form"},{"location":"how-to/setup-alert-rules/#annotations","text":"In the Summary box you can include free text type one or many of the following $labels $labels : - cluster - dc - hostname - org - rack - type - keyspace $value : In the Description box you can include free along with one or many of the above $labels Example CPU usage per DC Alerts usage on {{ $labels.hostname }} and cluster {{$labels.cluster}} Infomy","title":"Annotations"},{"location":"how-to/setup-alert-rules/#integrations","text":"Using the slider bar you can select any Integrations . Then click on the Info , Warning , Error icons, to select the group(s) of Integrations for the alert. Infomy Not selecting integrations If you do not select any specific Integrations the Alert will automatically follow the Global Dashboard Routing or if this has not been setup the Default Routing Integrations.","title":"Integrations"},{"location":"how-to/setup-alert-rules/#edit-alert-rule","text":"On the Axonops application menu, click Alerts Notifications and click Active. Select the Alert Rules tab and click Infomy","title":"Edit Alert Rule"},{"location":"how-to/setup-alert-rules/#delete-alert-rules","text":"To Delete An Alert Either... On the Axonops application menu, click Dashboards and select required Dashboard. eg. System Hover over the desired Chart click on the button. Below the chart click on the alert tab and click on the of the alert rule you want to remove. OR... On the Axonops application menu, click Alerts Notifications and click Active. Select the Alert Rules tab and click Infomy","title":"Delete Alert Rule(s)"},{"location":"how-to/setup-dashboards-global-integrations/","text":"Setup Dashboards Global Integrations On the Axonops application menu, click Alerts Notifications - Active and select Dashboards Global Routing tab. Notification Severities. Notification Severities. For each notifications severity Info Warning Error you can either use the slider to use the default routing or use the icon to customize the notification integrations. Notice: not available when default routing selected Infomy Customize Notifications. To customize notifications click on select the integrations that you require and click Close . Infomy Noticed: The Warning Integration were customized. You can remove these by clicking the . If you want to remove default routing groups from a severity and create custom groups , use the slider bar to remove default routing click the and follow this steps If you do not require any notifications ensure the default routing is off and delete any previously created custom notification. Infomy","title":"Setup Dashboards-Global Integrations"},{"location":"how-to/setup-dashboards-global-integrations/#setup-dashboards-global-integrations","text":"On the Axonops application menu, click Alerts Notifications - Active and select Dashboards Global Routing tab.","title":"Setup Dashboards Global Integrations"},{"location":"how-to/setup-dashboards-global-integrations/#notification-severities","text":"Notification Severities. For each notifications severity Info Warning Error you can either use the slider to use the default routing or use the icon to customize the notification integrations. Notice: not available when default routing selected Infomy","title":"Notification Severities."},{"location":"how-to/setup-dashboards-global-integrations/#customize-notifications","text":"To customize notifications click on select the integrations that you require and click Close . Infomy Noticed: The Warning Integration were customized. You can remove these by clicking the . If you want to remove default routing groups from a severity and create custom groups , use the slider bar to remove default routing click the and follow this steps If you do not require any notifications ensure the default routing is off and delete any previously created custom notification. Infomy","title":"Customize Notifications."},{"location":"how-to/setup-healthcheks/","text":"Setup Healthcheks Add Healthchek Services On the Axonops application menu, click Healthchecks and select Setup tab. Infomy Create Services Below there few examples copy and Paste inside. and click save { shellchecks : [ { name : check_cassandra_statusbinary , shell : /bin/bash , script : /var/lib/cassandra_checks/check_cassandra_statusbinary.sh , interval : 5m , timeout : 1m } ], httpchecks : [ { name : cassandra , http : http://localhost:9042 , tls_skip_verify : true , method : GET , interval : 10s , timeout : 1m }, { name : cassandra , http : http://localhost:9916 , tls_skip_verify : true , method : GET , interval : 10s , timeout : 1m } ], tcpchecks : [ { name : tcp_cassandra , tcp : http://localhost:9042 , interval : 30s , timeout : 1m }, { name : tcp_cassandra , tcp : http://localhost:9200 , interval : 5m , timeout : 1m } ] } Example: Infomy Delete Services To Delete a service copy and Paste inside. and click save { shellchecks : [], httpchecks : [], tcpchecks : [] } Example: Infomy","title":"Setup Healthcheks"},{"location":"how-to/setup-healthcheks/#setup-healthcheks","text":"","title":"Setup Healthcheks"},{"location":"how-to/setup-healthcheks/#add-healthchek-services","text":"On the Axonops application menu, click Healthchecks and select Setup tab. Infomy","title":"Add Healthchek Services"},{"location":"how-to/setup-healthcheks/#create-services","text":"Below there few examples copy and Paste inside. and click save { shellchecks : [ { name : check_cassandra_statusbinary , shell : /bin/bash , script : /var/lib/cassandra_checks/check_cassandra_statusbinary.sh , interval : 5m , timeout : 1m } ], httpchecks : [ { name : cassandra , http : http://localhost:9042 , tls_skip_verify : true , method : GET , interval : 10s , timeout : 1m }, { name : cassandra , http : http://localhost:9916 , tls_skip_verify : true , method : GET , interval : 10s , timeout : 1m } ], tcpchecks : [ { name : tcp_cassandra , tcp : http://localhost:9042 , interval : 30s , timeout : 1m }, { name : tcp_cassandra , tcp : http://localhost:9200 , interval : 5m , timeout : 1m } ] } Example: Infomy","title":"Create Services"},{"location":"how-to/setup-healthcheks/#delete-services","text":"To Delete a service copy and Paste inside. and click save { shellchecks : [], httpchecks : [], tcpchecks : [] } Example: Infomy","title":"Delete Services"},{"location":"installation/agents/installing-centos/","text":"Installing on RPM-based Linux (CentOS, Fedora, OpenSuse, RedHat) Java Agent Installation Description Download Stable for CentOS / Fedora / OpenSuse / Redhat Linux x86-64 Stable for CentOS / Fedora / OpenSuse / Redhat Linux ARM64 Stable for CentOS / Fedora / OpenSuse / Redhat Linux ARMv7 Install Stable Before installing java agent , you need to make sure you have ... and ... \u2013 ... up and running. You can verify if you're already good to go with the following commands: .. --version # ... 2.7.13 ... --version # ... 9.0.1 Installing and verifying java agent is as simple as: sudo yum install rpm package url Example: sudo yum install https://dl.java-agent.com/oss/release/java-agent-5.4.2-1.x86_64.rpm Or install manually using rpm. First execute wget rpm package url Example: wget https://dl.java-agent.com/oss/release/java-agent-5.4.2-1.x86_64.rpm On CentOS / Fedora / Redhat: sudo yum install initscripts fontconfig sudo rpm -Uvh local rpm package On OpenSuse: sudo rpm -i --nodeps local rpm package Install via YUM Repository Add the following to a new file at /etc/yum.repos.d/axonops.repo [java-agent] name=axonagent baseurl=https://packages.javaagent.com/oss/rpm repo_gpgcheck=1 enabled=1 gpgcheck=1 gpgkey=https://packages.javaagent.com/gpg.key sslverify=1 sslcacert=/etc/pki/tls/certs/ca-bundle.crt There is a separate repository if you want beta releases. [java-agent] name=axonagent baseurl=https://packages.javaagent.com/oss/rpm-beta repo_gpgcheck=1 enabled=1 gpgcheck=1 gpgkey=https://packages.javaagent.com/gpg.key sslverify=1 sslcacert=/etc/pki/tls/certs/ca-bundle.crt Then install Grafana via the yum command. sudo yum install java-agent RPM GPG Key The RPMs are signed, you can verify the signature with this public GPG key . Create a file /etc/apt/sources.list.d/java_agent.list and add the following to it. Cloning from GitHub Java agent can also be used without a system-wide installation by cloning the repository into a subfolder of your project's root directory: git clone https://github . com/squidfunk/axonops . git This is especially useful if you want to extend the app and override some parts of the app. The app will reside in the folder path-to/folder . Package details Installs binary to /usr/sbin/java-agent Installs Init.d script to /etc/init.d/java-agent Creates default file (environment vars) to /etc/default/java-agent Installs configuration file to /etc/java_agent/java_agent.ini Installs systemd service (if systemd is available) name java-agent.agent The default configuration sets the log file at /var/log/java_agent/java_agent.log Using Docker If you're familiar with Docker, the official Docker image for Material comes with all dependencies pre-installed and ready-to-use with the latest version published on PyPI, packaged in a very small image. Pull it with: docker pull squidfunk/mkdocs-material The axonops executable is provided as an entrypoint, serve is the default command. Start the development agent in your project root with: docker run --rm -it -p 8000 :8000 -v ${ PWD } :/docs squidfunk/mkdocs-material If you're using Windows command prompt ( cmd.exe ), substitute ${PWD} with \"%cd%\" . Start the agent (init.d service) Start Java Agent by running: sudo service java-agent start This will start the java-agent process as the java-agent user, which was created during the package installation. To configure the java agent to start at boot time: sudo /sbin/chkconfig --add java-agent Start the Java Agent (init.d service) To start the service using systemd: systemctl daemon-reload systemctl start java-agent systemctl status java-agent Enable the systemd service so that java agent starts at boot. sudo systemctl enable java-agent . service Environment file The systemd service file and init.d script both use the file located at /etc/default/java-agent for environment variables used when starting the agent. Here you can override log directory, data directory and other variables. Logging By default Java Agent will log to /var/log/java_agent Axon Agent Installation Description Download Stable for CentOS / Fedora / OpenSuse / Redhat Linux x86-64 Stable for CentOS / Fedora / OpenSuse / Redhat Linux ARM64 Stable for CentOS / Fedora / OpenSuse / Redhat Linux ARMv7 Install Stable Before installing axon agent , you need to make sure you have ... and ... \u2013 ... up and running. You can verify if you're already good to go with the following commands: .. --version # ... 2.7.13 ... --version # ... 9.0.1 Installing and verifying axon agent is as simple as: sudo yum install rpm package url Example: sudo yum install https://dl.axon-agent.com/oss/release/axon-agent-5.4.2-1.x86_64.rpm Or install manually using rpm. First execute wget rpm package url Example: wget https://dl.axon-agent.com/oss/release/axon-agent-5.4.2-1.x86_64.rpm On CentOS / Fedora / Redhat: sudo yum install initscripts fontconfig sudo rpm -Uvh local rpm package On OpenSuse: sudo rpm -i --nodeps local rpm package Install via YUM Repository Add the following to a new file at /etc/yum.repos.d/axonops.repo [axon-agent] name=axonagent baseurl=https://packages.axonagent.com/oss/rpm repo_gpgcheck=1 enabled=1 gpgcheck=1 gpgkey=https://packages.axonagent.com/gpg.key sslverify=1 sslcacert=/etc/pki/tls/certs/ca-bundle.crt There is a separate repository if you want beta releases. [axon-agent] name=axonagent baseurl=https://packages.axonagent.com/oss/rpm-beta repo_gpgcheck=1 enabled=1 gpgcheck=1 gpgkey=https://packages.axonagent.com/gpg.key sslverify=1 sslcacert=/etc/pki/tls/certs/ca-bundle.crt Then install Grafana via the yum command. sudo yum install axon-agent RPM GPG Key The RPMs are signed, you can verify the signature with this public GPG key . Create a file /etc/apt/sources.list.d/axon_agent.list and add the following to it. Cloning from GitHub Axon agent can also be used without a system-wide installation by cloning the repository into a subfolder of your project's root directory: git clone https://github . com/squidfunk/axonops . git This is especially useful if you want to extend the app and override some parts of the app. The app will reside in the folder path-to/folder . Package details Installs binary to /usr/sbin/axon-agent Installs Init.d script to /etc/init.d/axon-agent Creates default file (environment vars) to /etc/default/axon-agent Installs configuration file to /etc/axon_agent/axon_agent.ini Installs systemd service (if systemd is available) name axon-agent.agent The default configuration sets the log file at /var/log/axon_agent/axon_agent.log Using Docker If you're familiar with Docker, the official Docker image for Material comes with all dependencies pre-installed and ready-to-use with the latest version published on PyPI, packaged in a very small image. Pull it with: docker pull squidfunk/mkdocs-material The axonops executable is provided as an entrypoint, serve is the default command. Start the development agent in your project root with: docker run --rm -it -p 8000 :8000 -v ${ PWD } :/docs squidfunk/mkdocs-material If you're using Windows command prompt ( cmd.exe ), substitute ${PWD} with \"%cd%\" . Start the agent (init.d service) Start Axon Agent by running: sudo service axon-agent start This will start the axon-agent process as the axon-agent user, which was created during the package installation. To configure the axon agent to start at boot time: sudo /sbin/chkconfig --add axon-agent Start the Axon Agent (init.d service) To start the service using systemd: systemctl daemon-reload systemctl start axon-agent systemctl status axon-agent Enable the systemd service so that axon agent starts at boot. sudo systemctl enable axon-agent . service Environment file The systemd service file and init.d script both use the file located at /etc/default/axon-agent for environment variables used when starting the agent. Here you can override log directory, data directory and other variables. Logging By default Axon Agent will log to /var/log/axon_agent","title":"Installing on Centos/Redhat"},{"location":"installation/agents/installing-centos/#installing-on-rpm-based-linux-centos-fedora-opensuse-redhat","text":"","title":"Installing on RPM-based Linux (CentOS, Fedora, OpenSuse, RedHat)"},{"location":"installation/agents/installing-centos/#java-agent-installation","text":"Description Download Stable for CentOS / Fedora / OpenSuse / Redhat Linux x86-64 Stable for CentOS / Fedora / OpenSuse / Redhat Linux ARM64 Stable for CentOS / Fedora / OpenSuse / Redhat Linux ARMv7","title":"Java Agent Installation"},{"location":"installation/agents/installing-centos/#install-stable","text":"Before installing java agent , you need to make sure you have ... and ... \u2013 ... up and running. You can verify if you're already good to go with the following commands: .. --version # ... 2.7.13 ... --version # ... 9.0.1 Installing and verifying java agent is as simple as: sudo yum install rpm package url Example: sudo yum install https://dl.java-agent.com/oss/release/java-agent-5.4.2-1.x86_64.rpm Or install manually using rpm. First execute wget rpm package url Example: wget https://dl.java-agent.com/oss/release/java-agent-5.4.2-1.x86_64.rpm","title":"Install Stable"},{"location":"installation/agents/installing-centos/#on-centos-fedora-redhat","text":"sudo yum install initscripts fontconfig sudo rpm -Uvh local rpm package","title":"On CentOS / Fedora / Redhat:"},{"location":"installation/agents/installing-centos/#on-opensuse","text":"sudo rpm -i --nodeps local rpm package","title":"On OpenSuse:"},{"location":"installation/agents/installing-centos/#install-via-yum-repository","text":"Add the following to a new file at /etc/yum.repos.d/axonops.repo [java-agent] name=axonagent baseurl=https://packages.javaagent.com/oss/rpm repo_gpgcheck=1 enabled=1 gpgcheck=1 gpgkey=https://packages.javaagent.com/gpg.key sslverify=1 sslcacert=/etc/pki/tls/certs/ca-bundle.crt There is a separate repository if you want beta releases. [java-agent] name=axonagent baseurl=https://packages.javaagent.com/oss/rpm-beta repo_gpgcheck=1 enabled=1 gpgcheck=1 gpgkey=https://packages.javaagent.com/gpg.key sslverify=1 sslcacert=/etc/pki/tls/certs/ca-bundle.crt Then install Grafana via the yum command. sudo yum install java-agent","title":"Install via YUM Repository"},{"location":"installation/agents/installing-centos/#rpm-gpg-key","text":"The RPMs are signed, you can verify the signature with this public GPG key . Create a file /etc/apt/sources.list.d/java_agent.list and add the following to it.","title":"RPM GPG Key"},{"location":"installation/agents/installing-centos/#cloning-from-github","text":"Java agent can also be used without a system-wide installation by cloning the repository into a subfolder of your project's root directory: git clone https://github . com/squidfunk/axonops . git This is especially useful if you want to extend the app and override some parts of the app. The app will reside in the folder path-to/folder .","title":"Cloning from GitHub"},{"location":"installation/agents/installing-centos/#package-details","text":"Installs binary to /usr/sbin/java-agent Installs Init.d script to /etc/init.d/java-agent Creates default file (environment vars) to /etc/default/java-agent Installs configuration file to /etc/java_agent/java_agent.ini Installs systemd service (if systemd is available) name java-agent.agent The default configuration sets the log file at /var/log/java_agent/java_agent.log","title":"Package details"},{"location":"installation/agents/installing-centos/#using-docker","text":"If you're familiar with Docker, the official Docker image for Material comes with all dependencies pre-installed and ready-to-use with the latest version published on PyPI, packaged in a very small image. Pull it with: docker pull squidfunk/mkdocs-material The axonops executable is provided as an entrypoint, serve is the default command. Start the development agent in your project root with: docker run --rm -it -p 8000 :8000 -v ${ PWD } :/docs squidfunk/mkdocs-material If you're using Windows command prompt ( cmd.exe ), substitute ${PWD} with \"%cd%\" .","title":"Using Docker"},{"location":"installation/agents/installing-centos/#start-the-agent-initd-service","text":"Start Java Agent by running: sudo service java-agent start This will start the java-agent process as the java-agent user, which was created during the package installation. To configure the java agent to start at boot time: sudo /sbin/chkconfig --add java-agent","title":"Start the agent (init.d service)"},{"location":"installation/agents/installing-centos/#start-the-java-agent-initd-service","text":"To start the service using systemd: systemctl daemon-reload systemctl start java-agent systemctl status java-agent Enable the systemd service so that java agent starts at boot. sudo systemctl enable java-agent . service","title":"Start the Java Agent (init.d service)"},{"location":"installation/agents/installing-centos/#environment-file","text":"The systemd service file and init.d script both use the file located at /etc/default/java-agent for environment variables used when starting the agent. Here you can override log directory, data directory and other variables.","title":"Environment file"},{"location":"installation/agents/installing-centos/#logging","text":"By default Java Agent will log to /var/log/java_agent","title":"Logging"},{"location":"installation/agents/installing-centos/#axon-agent-installation","text":"Description Download Stable for CentOS / Fedora / OpenSuse / Redhat Linux x86-64 Stable for CentOS / Fedora / OpenSuse / Redhat Linux ARM64 Stable for CentOS / Fedora / OpenSuse / Redhat Linux ARMv7","title":"Axon Agent Installation"},{"location":"installation/agents/installing-centos/#install-stable_1","text":"Before installing axon agent , you need to make sure you have ... and ... \u2013 ... up and running. You can verify if you're already good to go with the following commands: .. --version # ... 2.7.13 ... --version # ... 9.0.1 Installing and verifying axon agent is as simple as: sudo yum install rpm package url Example: sudo yum install https://dl.axon-agent.com/oss/release/axon-agent-5.4.2-1.x86_64.rpm Or install manually using rpm. First execute wget rpm package url Example: wget https://dl.axon-agent.com/oss/release/axon-agent-5.4.2-1.x86_64.rpm","title":"Install Stable"},{"location":"installation/agents/installing-centos/#on-centos-fedora-redhat_1","text":"sudo yum install initscripts fontconfig sudo rpm -Uvh local rpm package","title":"On CentOS / Fedora / Redhat:"},{"location":"installation/agents/installing-centos/#on-opensuse_1","text":"sudo rpm -i --nodeps local rpm package","title":"On OpenSuse:"},{"location":"installation/agents/installing-centos/#install-via-yum-repository_1","text":"Add the following to a new file at /etc/yum.repos.d/axonops.repo [axon-agent] name=axonagent baseurl=https://packages.axonagent.com/oss/rpm repo_gpgcheck=1 enabled=1 gpgcheck=1 gpgkey=https://packages.axonagent.com/gpg.key sslverify=1 sslcacert=/etc/pki/tls/certs/ca-bundle.crt There is a separate repository if you want beta releases. [axon-agent] name=axonagent baseurl=https://packages.axonagent.com/oss/rpm-beta repo_gpgcheck=1 enabled=1 gpgcheck=1 gpgkey=https://packages.axonagent.com/gpg.key sslverify=1 sslcacert=/etc/pki/tls/certs/ca-bundle.crt Then install Grafana via the yum command. sudo yum install axon-agent","title":"Install via YUM Repository"},{"location":"installation/agents/installing-centos/#rpm-gpg-key_1","text":"The RPMs are signed, you can verify the signature with this public GPG key . Create a file /etc/apt/sources.list.d/axon_agent.list and add the following to it.","title":"RPM GPG Key"},{"location":"installation/agents/installing-centos/#cloning-from-github_1","text":"Axon agent can also be used without a system-wide installation by cloning the repository into a subfolder of your project's root directory: git clone https://github . com/squidfunk/axonops . git This is especially useful if you want to extend the app and override some parts of the app. The app will reside in the folder path-to/folder .","title":"Cloning from GitHub"},{"location":"installation/agents/installing-centos/#package-details_1","text":"Installs binary to /usr/sbin/axon-agent Installs Init.d script to /etc/init.d/axon-agent Creates default file (environment vars) to /etc/default/axon-agent Installs configuration file to /etc/axon_agent/axon_agent.ini Installs systemd service (if systemd is available) name axon-agent.agent The default configuration sets the log file at /var/log/axon_agent/axon_agent.log","title":"Package details"},{"location":"installation/agents/installing-centos/#using-docker_1","text":"If you're familiar with Docker, the official Docker image for Material comes with all dependencies pre-installed and ready-to-use with the latest version published on PyPI, packaged in a very small image. Pull it with: docker pull squidfunk/mkdocs-material The axonops executable is provided as an entrypoint, serve is the default command. Start the development agent in your project root with: docker run --rm -it -p 8000 :8000 -v ${ PWD } :/docs squidfunk/mkdocs-material If you're using Windows command prompt ( cmd.exe ), substitute ${PWD} with \"%cd%\" .","title":"Using Docker"},{"location":"installation/agents/installing-centos/#start-the-agent-initd-service_1","text":"Start Axon Agent by running: sudo service axon-agent start This will start the axon-agent process as the axon-agent user, which was created during the package installation. To configure the axon agent to start at boot time: sudo /sbin/chkconfig --add axon-agent","title":"Start the agent (init.d service)"},{"location":"installation/agents/installing-centos/#start-the-axon-agent-initd-service","text":"To start the service using systemd: systemctl daemon-reload systemctl start axon-agent systemctl status axon-agent Enable the systemd service so that axon agent starts at boot. sudo systemctl enable axon-agent . service","title":"Start the Axon Agent (init.d service)"},{"location":"installation/agents/installing-centos/#environment-file_1","text":"The systemd service file and init.d script both use the file located at /etc/default/axon-agent for environment variables used when starting the agent. Here you can override log directory, data directory and other variables.","title":"Environment file"},{"location":"installation/agents/installing-centos/#logging_1","text":"By default Axon Agent will log to /var/log/axon_agent","title":"Logging"},{"location":"installation/agents/installing-ubuntu/","text":"Installing on Debian / Ubuntu Java Agent Installation Description Download Stable for Debian-based Linux x86-64 Stable for Debian-based Linux ARM64 Stable for Debian-based Linux ARMv7 Install Stable Before installing java agent , you need to make sure you have ... and ... \u2013 ... up and running. You can verify if you're already good to go with the following commands: .. --version # ... 2.7.13 ... --version # ... 9.0.1 Installing and verifying java agent is as simple as: wget debian package url sudo apt-get install -y adduser libfontconfig sudo dpkg -i java_agent version _amd64.deb Example wget https://url/dl.java_agent.4.2_amd64.deb sudo apt-get install -y adduser libfontconfig sudo dpkg -i java_agent_5.4.2_amd64.deb APT Repository Create a file /etc/apt/sources.list.d/java_agent.list and add the following to it. deb https://packages.axonops.java_agent.com/oss/deb stable main There is a separate repository if you want beta releases. deb https://packages.axonops.java_agent.com/oss/deb beta main Use the above line even if you are on Ubuntu or another Debian version. Then add our gpg key. This allows you to install signed packages. curl https://packages.axonops.java_agent.com/gpg.key | sudo apt-key add - Update your Apt repositories and install agent sudo apt-get update sudo apt-get install axonops_java_agent On some older versions of Ubuntu and Debian you may need to install the apt-transport-https package which is needed to fetch packages over HTTPS. sudo apt-get install -y apt-transport-https Cloning from GitHub AxonOps Server can also be used without a system-wide installation by cloning the repository into a subfolder of your project's root directory: git clone https://github . com/squidfunk/axonops . git This is especially useful if you want to extend the app and override some parts of the app. The app will reside in the folder path-to/folder . Package details Installs binary to /usr/sbin/java-agent Installs Init.d script to /etc/init.d/java-agent Creates default file (environment vars) to /etc/default/java-agent Installs configuration file to /etc/java_agent/java_agent.ini Installs systemd service (if systemd is available) name java-server.agent The default configuration sets the log file at /var/log/java_agent/java_agent.log Using Docker If you're familiar with Docker, the official Docker image for Material comes with all dependencies pre-installed and ready-to-use with the latest version published on PyPI, packaged in a very small image. Pull it with: docker pull squidfunk/mkdocs-material The axonops executable is provided as an entrypoint, serve is the default command. Start the development server in your project root with: docker run --rm -it -p 8000 :8000 -v ${ PWD } :/docs squidfunk/mkdocs-material If you're using Windows command prompt ( cmd.exe ), substitute ${PWD} with \"%cd%\" . Start the server (init.d service) Start Java Agent by running: sudo service java-server start This will start the java-server process as the java-server user, which was created during the package installation. To configure the java server to start at boot time: sudo update-rc . d java-agent defaults Start the Java Agent (init.d service) To start the service using systemd: systemctl daemon-reload systemctl start java-agent systemctl status java-agent Enable the systemd service so that java agent starts at boot. sudo systemctl enable java-agent . service Environment file The systemd service file and init.d script both use the file located at /etc/default/java-agent for environment variables used when starting the agent. Here you can override log directory, data directory and other variables. Logging By default Java Agent will log to /var/log/java_agent Axonops Agent Installation Description Download Stable for Debian-based Linux x86-64 Stable for Debian-based Linux ARM64 Stable for Debian-based Linux ARMv7 Install Stable Before installing axon-agent , you need to make sure you have ... and ... \u2013 ... up and running. You can verify if you're already good to go with the following commands: .. --version # ... 2.7.13 ... --version # ... 9.0.1 Installing and verifying axon-agent: wget debian package url sudo apt-get install -y adduser libfontconfig sudo dpkg -i axon-agent version _amd64.deb Example wget https://url/dl.axon-agent.4.2_amd64.deb sudo apt-get install -y adduser libfontconfig sudo dpkg -i axon-agent.4.2_amd64.deb APT Repository Create a file /etc/apt/sources.list.d/axon-agent.list and add the following to it. deb https://packages.axonops.axon-agent.com/oss/deb stable main There is a separate repository if you want beta releases. deb https://packages.axonops.axon-agent.com/oss/deb beta main Use the above line even if you are on Ubuntu or another Debian version. Then add our gpg key. This allows you to install signed packages. curl https://packages.axonops.axon-agent.com/gpg.key | sudo apt-key add - Update your Apt repositories and install agent sudo apt-get update sudo apt-get install axonops_axon-agent On some older versions of Ubuntu and Debian you may need to install the apt-transport-https package which is needed to fetch packages over HTTPS. sudo apt-get install -y apt-transport-https Cloning from GitHub Node Server can also be used without a system-wide installation by cloning the repository into a subfolder of your project's root directory: git clone https://github . com/squidfunk/axon-agent . git This is especially useful if you want to extend the app and override some parts of the app. The app will reside in the folder path-to/folder . Package details Installs binary to /usr/sbin/axon-agent Installs Init.d script to /etc/init.d/axon-agent Creates default file (environment vars) to /etc/default/axon-agent Installs configuration file to /etc/java_agent/axon-agent.ini Installs systemd service (if systemd is available) name node-server.agent The default configuration sets the log file at /var/log/axon-agent/axon-agent.log Using Docker If you're familiar with Docker, the official Docker image for Material comes with all dependencies pre-installed and ready-to-use with the latest version published on PyPI, packaged in a very small image. Pull it with: docker pull squidfunk/mkdocs-material The axonops executable is provided as an entrypoint, serve is the default command. Start the development server in your project root with: docker run --rm -it -p 8000 :8000 -v ${ PWD } :/docs squidfunk/mkdocs-material If you're using Windows command prompt ( cmd.exe ), substitute ${PWD} with \"%cd%\" . Start the server (init.d service) Start Node Agent by running: sudo service node-server start This will start the node-server process as the node-server user, which was created during the package installation. To configure the node server to start at boot time: sudo update-rc . d axon-agent defaults Start the Node Agent (init.d service) To start the service using systemd: systemctl daemon-reload systemctl start axon-agent systemctl status axon-agent Enable the systemd service so that axon-agent starts at boot. sudo systemctl enable axon-agent . service Environment file The systemd service file and init.d script both use the file located at /etc/default/axon-agent for environment variables used when starting the agent. Here you can override log directory, data directory and other variables. Logging By default Java Agent will log to /var/log/axon-agent","title":"Installing on Ubuntu/Debian"},{"location":"installation/agents/installing-ubuntu/#installing-on-debian-ubuntu","text":"","title":"Installing on Debian / Ubuntu"},{"location":"installation/agents/installing-ubuntu/#java-agent-installation","text":"Description Download Stable for Debian-based Linux x86-64 Stable for Debian-based Linux ARM64 Stable for Debian-based Linux ARMv7","title":"Java Agent Installation"},{"location":"installation/agents/installing-ubuntu/#install-stable","text":"Before installing java agent , you need to make sure you have ... and ... \u2013 ... up and running. You can verify if you're already good to go with the following commands: .. --version # ... 2.7.13 ... --version # ... 9.0.1 Installing and verifying java agent is as simple as: wget debian package url sudo apt-get install -y adduser libfontconfig sudo dpkg -i java_agent version _amd64.deb Example wget https://url/dl.java_agent.4.2_amd64.deb sudo apt-get install -y adduser libfontconfig sudo dpkg -i java_agent_5.4.2_amd64.deb","title":"Install Stable"},{"location":"installation/agents/installing-ubuntu/#apt-repository","text":"Create a file /etc/apt/sources.list.d/java_agent.list and add the following to it. deb https://packages.axonops.java_agent.com/oss/deb stable main There is a separate repository if you want beta releases. deb https://packages.axonops.java_agent.com/oss/deb beta main Use the above line even if you are on Ubuntu or another Debian version. Then add our gpg key. This allows you to install signed packages. curl https://packages.axonops.java_agent.com/gpg.key | sudo apt-key add - Update your Apt repositories and install agent sudo apt-get update sudo apt-get install axonops_java_agent On some older versions of Ubuntu and Debian you may need to install the apt-transport-https package which is needed to fetch packages over HTTPS. sudo apt-get install -y apt-transport-https","title":"APT Repository"},{"location":"installation/agents/installing-ubuntu/#cloning-from-github","text":"AxonOps Server can also be used without a system-wide installation by cloning the repository into a subfolder of your project's root directory: git clone https://github . com/squidfunk/axonops . git This is especially useful if you want to extend the app and override some parts of the app. The app will reside in the folder path-to/folder .","title":"Cloning from GitHub"},{"location":"installation/agents/installing-ubuntu/#package-details","text":"Installs binary to /usr/sbin/java-agent Installs Init.d script to /etc/init.d/java-agent Creates default file (environment vars) to /etc/default/java-agent Installs configuration file to /etc/java_agent/java_agent.ini Installs systemd service (if systemd is available) name java-server.agent The default configuration sets the log file at /var/log/java_agent/java_agent.log","title":"Package details"},{"location":"installation/agents/installing-ubuntu/#using-docker","text":"If you're familiar with Docker, the official Docker image for Material comes with all dependencies pre-installed and ready-to-use with the latest version published on PyPI, packaged in a very small image. Pull it with: docker pull squidfunk/mkdocs-material The axonops executable is provided as an entrypoint, serve is the default command. Start the development server in your project root with: docker run --rm -it -p 8000 :8000 -v ${ PWD } :/docs squidfunk/mkdocs-material If you're using Windows command prompt ( cmd.exe ), substitute ${PWD} with \"%cd%\" .","title":"Using Docker"},{"location":"installation/agents/installing-ubuntu/#start-the-server-initd-service","text":"Start Java Agent by running: sudo service java-server start This will start the java-server process as the java-server user, which was created during the package installation. To configure the java server to start at boot time: sudo update-rc . d java-agent defaults","title":"Start the server (init.d service)"},{"location":"installation/agents/installing-ubuntu/#start-the-java-agent-initd-service","text":"To start the service using systemd: systemctl daemon-reload systemctl start java-agent systemctl status java-agent Enable the systemd service so that java agent starts at boot. sudo systemctl enable java-agent . service","title":"Start the Java Agent (init.d service)"},{"location":"installation/agents/installing-ubuntu/#environment-file","text":"The systemd service file and init.d script both use the file located at /etc/default/java-agent for environment variables used when starting the agent. Here you can override log directory, data directory and other variables.","title":"Environment file"},{"location":"installation/agents/installing-ubuntu/#logging","text":"By default Java Agent will log to /var/log/java_agent","title":"Logging"},{"location":"installation/agents/installing-ubuntu/#axonops-agent-installation","text":"Description Download Stable for Debian-based Linux x86-64 Stable for Debian-based Linux ARM64 Stable for Debian-based Linux ARMv7","title":"Axonops Agent Installation"},{"location":"installation/agents/installing-ubuntu/#install-stable_1","text":"Before installing axon-agent , you need to make sure you have ... and ... \u2013 ... up and running. You can verify if you're already good to go with the following commands: .. --version # ... 2.7.13 ... --version # ... 9.0.1 Installing and verifying axon-agent: wget debian package url sudo apt-get install -y adduser libfontconfig sudo dpkg -i axon-agent version _amd64.deb Example wget https://url/dl.axon-agent.4.2_amd64.deb sudo apt-get install -y adduser libfontconfig sudo dpkg -i axon-agent.4.2_amd64.deb","title":"Install Stable"},{"location":"installation/agents/installing-ubuntu/#apt-repository_1","text":"Create a file /etc/apt/sources.list.d/axon-agent.list and add the following to it. deb https://packages.axonops.axon-agent.com/oss/deb stable main There is a separate repository if you want beta releases. deb https://packages.axonops.axon-agent.com/oss/deb beta main Use the above line even if you are on Ubuntu or another Debian version. Then add our gpg key. This allows you to install signed packages. curl https://packages.axonops.axon-agent.com/gpg.key | sudo apt-key add - Update your Apt repositories and install agent sudo apt-get update sudo apt-get install axonops_axon-agent On some older versions of Ubuntu and Debian you may need to install the apt-transport-https package which is needed to fetch packages over HTTPS. sudo apt-get install -y apt-transport-https","title":"APT Repository"},{"location":"installation/agents/installing-ubuntu/#cloning-from-github_1","text":"Node Server can also be used without a system-wide installation by cloning the repository into a subfolder of your project's root directory: git clone https://github . com/squidfunk/axon-agent . git This is especially useful if you want to extend the app and override some parts of the app. The app will reside in the folder path-to/folder .","title":"Cloning from GitHub"},{"location":"installation/agents/installing-ubuntu/#package-details_1","text":"Installs binary to /usr/sbin/axon-agent Installs Init.d script to /etc/init.d/axon-agent Creates default file (environment vars) to /etc/default/axon-agent Installs configuration file to /etc/java_agent/axon-agent.ini Installs systemd service (if systemd is available) name node-server.agent The default configuration sets the log file at /var/log/axon-agent/axon-agent.log","title":"Package details"},{"location":"installation/agents/installing-ubuntu/#using-docker_1","text":"If you're familiar with Docker, the official Docker image for Material comes with all dependencies pre-installed and ready-to-use with the latest version published on PyPI, packaged in a very small image. Pull it with: docker pull squidfunk/mkdocs-material The axonops executable is provided as an entrypoint, serve is the default command. Start the development server in your project root with: docker run --rm -it -p 8000 :8000 -v ${ PWD } :/docs squidfunk/mkdocs-material If you're using Windows command prompt ( cmd.exe ), substitute ${PWD} with \"%cd%\" .","title":"Using Docker"},{"location":"installation/agents/installing-ubuntu/#start-the-server-initd-service_1","text":"Start Node Agent by running: sudo service node-server start This will start the node-server process as the node-server user, which was created during the package installation. To configure the node server to start at boot time: sudo update-rc . d axon-agent defaults","title":"Start the server (init.d service)"},{"location":"installation/agents/installing-ubuntu/#start-the-node-agent-initd-service","text":"To start the service using systemd: systemctl daemon-reload systemctl start axon-agent systemctl status axon-agent Enable the systemd service so that axon-agent starts at boot. sudo systemctl enable axon-agent . service","title":"Start the Node Agent (init.d service)"},{"location":"installation/agents/installing-ubuntu/#environment-file_1","text":"The systemd service file and init.d script both use the file located at /etc/default/axon-agent for environment variables used when starting the agent. Here you can override log directory, data directory and other variables.","title":"Environment file"},{"location":"installation/agents/installing-ubuntu/#logging_1","text":"By default Java Agent will log to /var/log/axon-agent","title":"Logging"},{"location":"installation/gui/installing-centos/","text":"Installing on RPM-based Linux (CentOS, Fedora, OpenSuse, RedHat) Axon-Dash Installation Description Download Stable for CentOS / Fedora / OpenSuse / Redhat Linux x86-64 Stable for CentOS / Fedora / OpenSuse / Redhat Linux ARM64 Stable for CentOS / Fedora / OpenSuse / Redhat Linux ARMv7 Install Stable Before installing axon-dash , you need to make sure you have ... and ... \u2013 ... up and running. You can verify if you're already good to go with the following commands: .. --version # ... 2.7.13 ... --version # ... 9.0.1 Installing and verifying axon-dash is as simple as: sudo yum install rpm package url Example: sudo yum install https://dl.axon-dash.com/oss/release/axon-dash-5.4.2-1.x86_64.rpm Or install manually using rpm. First execute wget rpm package url Example: wget https://dl.axon-dash.com/oss/release/axon-dash-5.4.2-1.x86_64.rpm On CentOS / Fedora / Redhat: sudo yum install initscripts fontconfig sudo rpm -Uvh local rpm package On OpenSuse: sudo rpm -i --nodeps local rpm package Install via YUM Repository Add the following to a new file at /etc/yum.repos.d/axonops.repo [axon-dash] name=axondash baseurl=https://packages.axondash.com/oss/rpm repo_gpgcheck=1 enabled=1 gpgcheck=1 gpgkey=https://packages.axondash.com/gpg.key sslverify=1 sslcacert=/etc/pki/tls/certs/ca-bundle.crt There is a separate repository if you want beta releases. [axon-dash] name=axondash baseurl=https://packages.axondash.com/oss/rpm-beta repo_gpgcheck=1 enabled=1 gpgcheck=1 gpgkey=https://packages.axondash.com/gpg.key sslverify=1 sslcacert=/etc/pki/tls/certs/ca-bundle.crt Then install Grafana via the yum command. sudo yum install axon-dash RPM GPG Key The RPMs are signed, you can verify the signature with this public GPG key . Create a file /etc/apt/sources.list.d/axon-dash.list and add the following to it. Cloning from GitHub Java agent can also be used without a system-wide installation by cloning the repository into a subfolder of your project's root directory: git clone https://github . com/squidfunk/axonops . git This is especially useful if you want to extend the app and override some parts of the app. The app will reside in the folder path-to/folder . Package details Installs binary to /usr/sbin/axon-dash Installs Init.d script to /etc/init.d/axon-dash Creates default file (environment vars) to /etc/default/axon-dash Installs configuration file to /etc/axon-dash/axon-dash.ini Installs systemd service (if systemd is available) name axon-dash.agent The default configuration sets the log file at /var/log/axon-dash/axon-dash.log Using Docker If you're familiar with Docker, the official Docker image for Material comes with all dependencies pre-installed and ready-to-use with the latest version published on PyPI, packaged in a very small image. Pull it with: docker pull squidfunk/mkdocs-material The axonops executable is provided as an entrypoint, serve is the default command. Start the development agent in your project root with: docker run --rm -it -p 8000 :8000 -v ${ PWD } :/docs squidfunk/mkdocs-material If you're using Windows command prompt ( cmd.exe ), substitute ${PWD} with \"%cd%\" . Start the agent (init.d service) Start Java Agent by running: sudo service axon-dash start This will start the axon-dash process as the axon-dash user, which was created during the package installation. To configure the axon-dash to start at boot time: sudo /sbin/chkconfig --add axon-dash Start the Java Agent (init.d service) To start the service using systemd: systemctl daemon-reload systemctl start axon-dash systemctl status axon-dash Enable the systemd service so that axon-dash starts at boot. sudo systemctl enable axon-dash . service Environment file The systemd service file and init.d script both use the file located at /etc/default/axon-dash for environment variables used when starting the agent. Here you can override log directory, data directory and other variables. Logging By default Java Agent will log to /var/log/axon-dash Logging in for the first time Start Axon-Dash by executing ./bin/axon-dash. The axon-dash binary needs the working directory to be the root install directory (where the binary and the public folder is located). To run Axon-Dash open your browser and go to :3000. 3000 is the default http port that axon-dash listens to. To configure axon-dash followw the instructions here .","title":"Installing on Centos/Redhat"},{"location":"installation/gui/installing-centos/#installing-on-rpm-based-linux-centos-fedora-opensuse-redhat","text":"","title":"Installing on RPM-based Linux (CentOS, Fedora, OpenSuse, RedHat)"},{"location":"installation/gui/installing-centos/#axon-dash-installation","text":"Description Download Stable for CentOS / Fedora / OpenSuse / Redhat Linux x86-64 Stable for CentOS / Fedora / OpenSuse / Redhat Linux ARM64 Stable for CentOS / Fedora / OpenSuse / Redhat Linux ARMv7","title":"Axon-Dash Installation"},{"location":"installation/gui/installing-centos/#install-stable","text":"Before installing axon-dash , you need to make sure you have ... and ... \u2013 ... up and running. You can verify if you're already good to go with the following commands: .. --version # ... 2.7.13 ... --version # ... 9.0.1 Installing and verifying axon-dash is as simple as: sudo yum install rpm package url Example: sudo yum install https://dl.axon-dash.com/oss/release/axon-dash-5.4.2-1.x86_64.rpm Or install manually using rpm. First execute wget rpm package url Example: wget https://dl.axon-dash.com/oss/release/axon-dash-5.4.2-1.x86_64.rpm","title":"Install Stable"},{"location":"installation/gui/installing-centos/#on-centos-fedora-redhat","text":"sudo yum install initscripts fontconfig sudo rpm -Uvh local rpm package","title":"On CentOS / Fedora / Redhat:"},{"location":"installation/gui/installing-centos/#on-opensuse","text":"sudo rpm -i --nodeps local rpm package","title":"On OpenSuse:"},{"location":"installation/gui/installing-centos/#install-via-yum-repository","text":"Add the following to a new file at /etc/yum.repos.d/axonops.repo [axon-dash] name=axondash baseurl=https://packages.axondash.com/oss/rpm repo_gpgcheck=1 enabled=1 gpgcheck=1 gpgkey=https://packages.axondash.com/gpg.key sslverify=1 sslcacert=/etc/pki/tls/certs/ca-bundle.crt There is a separate repository if you want beta releases. [axon-dash] name=axondash baseurl=https://packages.axondash.com/oss/rpm-beta repo_gpgcheck=1 enabled=1 gpgcheck=1 gpgkey=https://packages.axondash.com/gpg.key sslverify=1 sslcacert=/etc/pki/tls/certs/ca-bundle.crt Then install Grafana via the yum command. sudo yum install axon-dash","title":"Install via YUM Repository"},{"location":"installation/gui/installing-centos/#rpm-gpg-key","text":"The RPMs are signed, you can verify the signature with this public GPG key . Create a file /etc/apt/sources.list.d/axon-dash.list and add the following to it.","title":"RPM GPG Key"},{"location":"installation/gui/installing-centos/#cloning-from-github","text":"Java agent can also be used without a system-wide installation by cloning the repository into a subfolder of your project's root directory: git clone https://github . com/squidfunk/axonops . git This is especially useful if you want to extend the app and override some parts of the app. The app will reside in the folder path-to/folder .","title":"Cloning from GitHub"},{"location":"installation/gui/installing-centos/#package-details","text":"Installs binary to /usr/sbin/axon-dash Installs Init.d script to /etc/init.d/axon-dash Creates default file (environment vars) to /etc/default/axon-dash Installs configuration file to /etc/axon-dash/axon-dash.ini Installs systemd service (if systemd is available) name axon-dash.agent The default configuration sets the log file at /var/log/axon-dash/axon-dash.log","title":"Package details"},{"location":"installation/gui/installing-centos/#using-docker","text":"If you're familiar with Docker, the official Docker image for Material comes with all dependencies pre-installed and ready-to-use with the latest version published on PyPI, packaged in a very small image. Pull it with: docker pull squidfunk/mkdocs-material The axonops executable is provided as an entrypoint, serve is the default command. Start the development agent in your project root with: docker run --rm -it -p 8000 :8000 -v ${ PWD } :/docs squidfunk/mkdocs-material If you're using Windows command prompt ( cmd.exe ), substitute ${PWD} with \"%cd%\" .","title":"Using Docker"},{"location":"installation/gui/installing-centos/#start-the-agent-initd-service","text":"Start Java Agent by running: sudo service axon-dash start This will start the axon-dash process as the axon-dash user, which was created during the package installation. To configure the axon-dash to start at boot time: sudo /sbin/chkconfig --add axon-dash","title":"Start the agent (init.d service)"},{"location":"installation/gui/installing-centos/#start-the-java-agent-initd-service","text":"To start the service using systemd: systemctl daemon-reload systemctl start axon-dash systemctl status axon-dash Enable the systemd service so that axon-dash starts at boot. sudo systemctl enable axon-dash . service","title":"Start the Java Agent (init.d service)"},{"location":"installation/gui/installing-centos/#environment-file","text":"The systemd service file and init.d script both use the file located at /etc/default/axon-dash for environment variables used when starting the agent. Here you can override log directory, data directory and other variables.","title":"Environment file"},{"location":"installation/gui/installing-centos/#logging","text":"By default Java Agent will log to /var/log/axon-dash","title":"Logging"},{"location":"installation/gui/installing-centos/#logging-in-for-the-first-time","text":"Start Axon-Dash by executing ./bin/axon-dash. The axon-dash binary needs the working directory to be the root install directory (where the binary and the public folder is located). To run Axon-Dash open your browser and go to :3000. 3000 is the default http port that axon-dash listens to. To configure axon-dash followw the instructions here .","title":"Logging in for the first time"},{"location":"installation/gui/installing-ubuntu/","text":"Installing on Debian / Ubuntu Axon-Dash Installation Description Download Stable for Debian-based Linux x86-64 Stable for Debian-based Linux ARM64 Stable for Debian-based Linux ARMv7 Install Stable Before installing axon-dash , you need to make sure you have ... and ... \u2013 ... up and running. You can verify if you're already good to go with the following commands: .. --version # ... 2.7.13 ... --version # ... 9.0.1 Installing and verifying axon-dash is as simple as: wget debian package url sudo apt-get install -y adduser libfontconfig sudo dpkg -i axon-dash version _amd64.deb Example wget https://url/dl.axon-dash.4.2_amd64.deb sudo apt-get install -y adduser libfontconfig sudo dpkg -i axon-dash_5.4.2_amd64.deb APT Repository Create a file /etc/apt/sources.list.d/axon-dash.list and add the following to it. deb https://packages.axonops.axon-dash.com/oss/deb stable main There is a separate repository if you want beta releases. deb https://packages.axonops.axon-dash.com/oss/deb beta main Use the above line even if you are on Ubuntu or another Debian version. Then add our gpg key. This allows you to install signed packages. curl https://packages.axonops.axon-dash.com/gpg.key | sudo apt-key add - Update your Apt repositories and install axon-dash sudo apt-get update sudo apt-get install axon-dash On some older versions of Ubuntu and Debian you may need to install the apt-transport-https package which is needed to fetch packages over HTTPS. sudo apt-get install -y apt-transport-https Cloning from GitHub Axon-Dash can also be used without a system-wide installation by cloning the repository into a subfolder of your project's root directory: git clone https://github . com/squidfunk/axon-dash . git This is especially useful if you want to extend the app and override some parts of the app. The app will reside in the folder path-to/folder . Package details Installs binary to /usr/sbin/axon-dash Installs Init.d script to /etc/init.d/axon-dash Creates default file (environment vars) to /etc/default/axon-dash Installs configuration file to /etc/axon-dash/axon-dash.ini Installs systemd service (if systemd is available) name axon-dash.agent The default configuration sets the log file at /var/log/axon-dash/axon-dash.log Using Docker If you're familiar with Docker, the official Docker image for Material comes with all dependencies pre-installed and ready-to-use with the latest version published on PyPI, packaged in a very small image. Pull it with: docker pull squidfunk/axon-dash The axonops executable is provided as an entrypoint, serve is the default command. Start the development server in your project root with: docker run --rm -it -p 8000 :8000 -v ${ PWD } :/docs squidfunk/axon-dash If you're using Windows command prompt ( cmd.exe ), substitute ${PWD} with \"%cd%\" . Start the axon-dash (init.d service) Start Java Agent by running: sudo service axon-dash start This will start the axon-dash process as the axon-dash user, which was created during the package installation. To configure the axon-dash to start at boot time: sudo update-rc . d axon-dash defaults Start the Java Agent (init.d service) To start the service using systemd: systemctl daemon-reload systemctl start axon-dash systemctl status axon-dash Enable the systemd service so that axon-dash starts at boot. sudo systemctl enable axon-dash . service Environment file The systemd service file and init.d script both use the file located at /etc/default/axon-dash for environment variables used when starting the axon-dash. Here you can override log directory, data directory and other variables. Logging By default Java Agent will log to /var/log/axon-dash Logging in for the first time Start Axon-Dash by executing ./bin/axon-dash . The axon-dash binary needs the working directory to be the root install directory (where the binary and the public folder is located). To run Axon-Dash open your browser and go to :3000. 3000 is the default http port that axon-dash listens to. To configure axon-dash followw the instructions here .","title":"Installing on Ubuntu/Debian"},{"location":"installation/gui/installing-ubuntu/#installing-on-debian-ubuntu","text":"","title":"Installing on Debian / Ubuntu"},{"location":"installation/gui/installing-ubuntu/#axon-dash-installation","text":"Description Download Stable for Debian-based Linux x86-64 Stable for Debian-based Linux ARM64 Stable for Debian-based Linux ARMv7","title":"Axon-Dash Installation"},{"location":"installation/gui/installing-ubuntu/#install-stable","text":"Before installing axon-dash , you need to make sure you have ... and ... \u2013 ... up and running. You can verify if you're already good to go with the following commands: .. --version # ... 2.7.13 ... --version # ... 9.0.1 Installing and verifying axon-dash is as simple as: wget debian package url sudo apt-get install -y adduser libfontconfig sudo dpkg -i axon-dash version _amd64.deb Example wget https://url/dl.axon-dash.4.2_amd64.deb sudo apt-get install -y adduser libfontconfig sudo dpkg -i axon-dash_5.4.2_amd64.deb","title":"Install Stable"},{"location":"installation/gui/installing-ubuntu/#apt-repository","text":"Create a file /etc/apt/sources.list.d/axon-dash.list and add the following to it. deb https://packages.axonops.axon-dash.com/oss/deb stable main There is a separate repository if you want beta releases. deb https://packages.axonops.axon-dash.com/oss/deb beta main Use the above line even if you are on Ubuntu or another Debian version. Then add our gpg key. This allows you to install signed packages. curl https://packages.axonops.axon-dash.com/gpg.key | sudo apt-key add - Update your Apt repositories and install axon-dash sudo apt-get update sudo apt-get install axon-dash On some older versions of Ubuntu and Debian you may need to install the apt-transport-https package which is needed to fetch packages over HTTPS. sudo apt-get install -y apt-transport-https","title":"APT Repository"},{"location":"installation/gui/installing-ubuntu/#cloning-from-github","text":"Axon-Dash can also be used without a system-wide installation by cloning the repository into a subfolder of your project's root directory: git clone https://github . com/squidfunk/axon-dash . git This is especially useful if you want to extend the app and override some parts of the app. The app will reside in the folder path-to/folder .","title":"Cloning from GitHub"},{"location":"installation/gui/installing-ubuntu/#package-details","text":"Installs binary to /usr/sbin/axon-dash Installs Init.d script to /etc/init.d/axon-dash Creates default file (environment vars) to /etc/default/axon-dash Installs configuration file to /etc/axon-dash/axon-dash.ini Installs systemd service (if systemd is available) name axon-dash.agent The default configuration sets the log file at /var/log/axon-dash/axon-dash.log","title":"Package details"},{"location":"installation/gui/installing-ubuntu/#using-docker","text":"If you're familiar with Docker, the official Docker image for Material comes with all dependencies pre-installed and ready-to-use with the latest version published on PyPI, packaged in a very small image. Pull it with: docker pull squidfunk/axon-dash The axonops executable is provided as an entrypoint, serve is the default command. Start the development server in your project root with: docker run --rm -it -p 8000 :8000 -v ${ PWD } :/docs squidfunk/axon-dash If you're using Windows command prompt ( cmd.exe ), substitute ${PWD} with \"%cd%\" .","title":"Using Docker"},{"location":"installation/gui/installing-ubuntu/#start-the-axon-dash-initd-service","text":"Start Java Agent by running: sudo service axon-dash start This will start the axon-dash process as the axon-dash user, which was created during the package installation. To configure the axon-dash to start at boot time: sudo update-rc . d axon-dash defaults","title":"Start the axon-dash (init.d service)"},{"location":"installation/gui/installing-ubuntu/#start-the-java-agent-initd-service","text":"To start the service using systemd: systemctl daemon-reload systemctl start axon-dash systemctl status axon-dash Enable the systemd service so that axon-dash starts at boot. sudo systemctl enable axon-dash . service","title":"Start the Java Agent (init.d service)"},{"location":"installation/gui/installing-ubuntu/#environment-file","text":"The systemd service file and init.d script both use the file located at /etc/default/axon-dash for environment variables used when starting the axon-dash. Here you can override log directory, data directory and other variables.","title":"Environment file"},{"location":"installation/gui/installing-ubuntu/#logging","text":"By default Java Agent will log to /var/log/axon-dash","title":"Logging"},{"location":"installation/gui/installing-ubuntu/#logging-in-for-the-first-time","text":"Start Axon-Dash by executing ./bin/axon-dash . The axon-dash binary needs the working directory to be the root install directory (where the binary and the public folder is located). To run Axon-Dash open your browser and go to :3000. 3000 is the default http port that axon-dash listens to. To configure axon-dash followw the instructions here .","title":"Logging in for the first time"},{"location":"installation/server/installing-centos/","text":"Installing on RPM-based Linux (CentOS, Fedora, OpenSuse, RedHat) Axon-Server Installation Description Download Stable for CentOS / Fedora / OpenSuse / Redhat Linux x86-64 Stable for CentOS / Fedora / OpenSuse / Redhat Linux ARM64 Stable for CentOS / Fedora / OpenSuse / Redhat Linux ARMv7 Install Stable Before installing axon-server , you need to make sure you have ... and ... \u2013 ... up and running. You can verify if you're already good to go with the following commands: .. --version # ... 2.7.13 ... --version # ... 9.0.1 Installing and verifying axon-server is as simple as: sudo yum install rpm package url Example: sudo yum install https://dl.axon-server.com/oss/release/axon-server-5.4.2-1.x86_64.rpm Or install manually using rpm. First execute wget rpm package url Example: wget https://dl.axon-server.com/oss/release/axon-server-5.4.2-1.x86_64.rpm On CentOS / Fedora / Redhat: sudo yum install initscripts fontconfig sudo rpm -Uvh local rpm package On OpenSuse: sudo rpm -i --nodeps local rpm package Install via YUM Repository Add the following to a new file at /etc/yum.repos.d/axonops.repo [axon-server] name=axonserver baseurl=https://packages.axonserver.com/oss/rpm repo_gpgcheck=1 enabled=1 gpgcheck=1 gpgkey=https://packages.axonserver.com/gpg.key sslverify=1 sslcacert=/etc/pki/tls/certs/ca-bundle.crt There is a separate repository if you want beta releases. [axon-server] name=axonserver baseurl=https://packages.axonserver.com/oss/rpm-beta repo_gpgcheck=1 enabled=1 gpgcheck=1 gpgkey=https://packages.axonserver.com/gpg.key sslverify=1 sslcacert=/etc/pki/tls/certs/ca-bundle.crt Then install Grafana via the yum command. sudo yum install axon-server RPM GPG Key The RPMs are signed, you can verify the signature with this public GPG key . Create a file /etc/apt/sources.list.d/axon-server.list and add the following to it. Cloning from GitHub Java agent can also be used without a system-wide installation by cloning the repository into a subfolder of your project's root directory: git clone https://github . com/squidfunk/axonops . git This is especially useful if you want to extend the app and override some parts of the app. The app will reside in the folder path-to/folder . Package details Installs binary to /usr/sbin/axon-server Installs Init.d script to /etc/init.d/axon-server Creates default file (environment vars) to /etc/default/axon-server Installs configuration file to /etc/axon-server/axon-server.ini Installs systemd service (if systemd is available) name axon-server.agent The default configuration sets the log file at /var/log/axon-server/axon-server.log Using Docker If you're familiar with Docker, the official Docker image for Material comes with all dependencies pre-installed and ready-to-use with the latest version published on PyPI, packaged in a very small image. Pull it with: docker pull squidfunk/mkdocs-material The axonops executable is provided as an entrypoint, serve is the default command. Start the development agent in your project root with: docker run --rm -it -p 8000 :8000 -v ${ PWD } :/docs squidfunk/mkdocs-material If you're using Windows command prompt ( cmd.exe ), substitute ${PWD} with \"%cd%\" . Start the agent (init.d service) Start Java Agent by running: sudo service axon-server start This will start the axon-server process as the axon-server user, which was created during the package installation. To configure the axon-server to start at boot time: sudo /sbin/chkconfig --add axon-server Start the Java Agent (init.d service) To start the service using systemd: systemctl daemon-reload systemctl start axon-server systemctl status axon-server Enable the systemd service so that axon-server starts at boot. sudo systemctl enable axon-server . service Environment file The systemd service file and init.d script both use the file located at /etc/default/axon-server for environment variables used when starting the agent. Here you can override log directory, data directory and other variables. Logging By default Java Agent will log to /var/log/axon-server","title":"Installing on Centos/Redhat"},{"location":"installation/server/installing-centos/#installing-on-rpm-based-linux-centos-fedora-opensuse-redhat","text":"","title":"Installing on RPM-based Linux (CentOS, Fedora, OpenSuse, RedHat)"},{"location":"installation/server/installing-centos/#axon-server-installation","text":"Description Download Stable for CentOS / Fedora / OpenSuse / Redhat Linux x86-64 Stable for CentOS / Fedora / OpenSuse / Redhat Linux ARM64 Stable for CentOS / Fedora / OpenSuse / Redhat Linux ARMv7","title":"Axon-Server Installation"},{"location":"installation/server/installing-centos/#install-stable","text":"Before installing axon-server , you need to make sure you have ... and ... \u2013 ... up and running. You can verify if you're already good to go with the following commands: .. --version # ... 2.7.13 ... --version # ... 9.0.1 Installing and verifying axon-server is as simple as: sudo yum install rpm package url Example: sudo yum install https://dl.axon-server.com/oss/release/axon-server-5.4.2-1.x86_64.rpm Or install manually using rpm. First execute wget rpm package url Example: wget https://dl.axon-server.com/oss/release/axon-server-5.4.2-1.x86_64.rpm","title":"Install Stable"},{"location":"installation/server/installing-centos/#on-centos-fedora-redhat","text":"sudo yum install initscripts fontconfig sudo rpm -Uvh local rpm package","title":"On CentOS / Fedora / Redhat:"},{"location":"installation/server/installing-centos/#on-opensuse","text":"sudo rpm -i --nodeps local rpm package","title":"On OpenSuse:"},{"location":"installation/server/installing-centos/#install-via-yum-repository","text":"Add the following to a new file at /etc/yum.repos.d/axonops.repo [axon-server] name=axonserver baseurl=https://packages.axonserver.com/oss/rpm repo_gpgcheck=1 enabled=1 gpgcheck=1 gpgkey=https://packages.axonserver.com/gpg.key sslverify=1 sslcacert=/etc/pki/tls/certs/ca-bundle.crt There is a separate repository if you want beta releases. [axon-server] name=axonserver baseurl=https://packages.axonserver.com/oss/rpm-beta repo_gpgcheck=1 enabled=1 gpgcheck=1 gpgkey=https://packages.axonserver.com/gpg.key sslverify=1 sslcacert=/etc/pki/tls/certs/ca-bundle.crt Then install Grafana via the yum command. sudo yum install axon-server","title":"Install via YUM Repository"},{"location":"installation/server/installing-centos/#rpm-gpg-key","text":"The RPMs are signed, you can verify the signature with this public GPG key . Create a file /etc/apt/sources.list.d/axon-server.list and add the following to it.","title":"RPM GPG Key"},{"location":"installation/server/installing-centos/#cloning-from-github","text":"Java agent can also be used without a system-wide installation by cloning the repository into a subfolder of your project's root directory: git clone https://github . com/squidfunk/axonops . git This is especially useful if you want to extend the app and override some parts of the app. The app will reside in the folder path-to/folder .","title":"Cloning from GitHub"},{"location":"installation/server/installing-centos/#package-details","text":"Installs binary to /usr/sbin/axon-server Installs Init.d script to /etc/init.d/axon-server Creates default file (environment vars) to /etc/default/axon-server Installs configuration file to /etc/axon-server/axon-server.ini Installs systemd service (if systemd is available) name axon-server.agent The default configuration sets the log file at /var/log/axon-server/axon-server.log","title":"Package details"},{"location":"installation/server/installing-centos/#using-docker","text":"If you're familiar with Docker, the official Docker image for Material comes with all dependencies pre-installed and ready-to-use with the latest version published on PyPI, packaged in a very small image. Pull it with: docker pull squidfunk/mkdocs-material The axonops executable is provided as an entrypoint, serve is the default command. Start the development agent in your project root with: docker run --rm -it -p 8000 :8000 -v ${ PWD } :/docs squidfunk/mkdocs-material If you're using Windows command prompt ( cmd.exe ), substitute ${PWD} with \"%cd%\" .","title":"Using Docker"},{"location":"installation/server/installing-centos/#start-the-agent-initd-service","text":"Start Java Agent by running: sudo service axon-server start This will start the axon-server process as the axon-server user, which was created during the package installation. To configure the axon-server to start at boot time: sudo /sbin/chkconfig --add axon-server","title":"Start the agent (init.d service)"},{"location":"installation/server/installing-centos/#start-the-java-agent-initd-service","text":"To start the service using systemd: systemctl daemon-reload systemctl start axon-server systemctl status axon-server Enable the systemd service so that axon-server starts at boot. sudo systemctl enable axon-server . service","title":"Start the Java Agent (init.d service)"},{"location":"installation/server/installing-centos/#environment-file","text":"The systemd service file and init.d script both use the file located at /etc/default/axon-server for environment variables used when starting the agent. Here you can override log directory, data directory and other variables.","title":"Environment file"},{"location":"installation/server/installing-centos/#logging","text":"By default Java Agent will log to /var/log/axon-server","title":"Logging"},{"location":"installation/server/installing-ubuntu/","text":"Installing on Debian / Ubuntu Axon-Server Installation Description Download Stable for Debian-based Linux x86-64 Stable for Debian-based Linux ARM64 Stable for Debian-based Linux ARMv7 Install Stable Before installing axon-server , you need to make sure you have ... and ... \u2013 ... up and running. You can verify if you're already good to go with the following commands: .. --version # ... 2.7.13 ... --version # ... 9.0.1 Installing and verifying axon-server is as simple as: wget debian package url sudo apt-get install -y adduser libfontconfig sudo dpkg -i axon-server version _amd64.deb Example wget https://url/dl.axon-server.4.2_amd64.deb sudo apt-get install -y adduser libfontconfig sudo dpkg -i axon-server_5.4.2_amd64.deb APT Repository Create a file /etc/apt/sources.list.d/axon-server.list and add the following to it. deb https://packages.axonops.axon-server.com/oss/deb stable main There is a separate repository if you want beta releases. deb https://packages.axonops.axon-server.com/oss/deb beta main Use the above line even if you are on Ubuntu or another Debian version. Then add our gpg key. This allows you to install signed packages. curl https://packages.axonops.axon-server.com/gpg.key | sudo apt-key add - Update your Apt repositories and install axon-server sudo apt-get update sudo apt-get install axon-server On some older versions of Ubuntu and Debian you may need to install the apt-transport-https package which is needed to fetch packages over HTTPS. sudo apt-get install -y apt-transport-https Cloning from GitHub AxonOps Server can also be used without a system-wide installation by cloning the repository into a subfolder of your project's root directory: git clone https://github . com/squidfunk/axon-server . git This is especially useful if you want to extend the app and override some parts of the app. The app will reside in the folder path-to/folder . Package details Installs binary to /usr/sbin/axon-server Installs Init.d script to /etc/init.d/axon-server Creates default file (environment vars) to /etc/default/axon-server Installs configuration file to /etc/axon-server/axon-server.ini Installs systemd service (if systemd is available) name axon-server.agent The default configuration sets the log file at /var/log/axon-server/axon-server.log Using Docker If you're familiar with Docker, the official Docker image for Material comes with all dependencies pre-installed and ready-to-use with the latest version published on PyPI, packaged in a very small image. Pull it with: docker pull squidfunk/axon-server The axonops executable is provided as an entrypoint, serve is the default command. Start the development server in your project root with: docker run --rm -it -p 8000 :8000 -v ${ PWD } :/docs squidfunk/axon-server If you're using Windows command prompt ( cmd.exe ), substitute ${PWD} with \"%cd%\" . Start the server (init.d service) Start Java Agent by running: sudo service axon-server start This will start the axon-server process as the axon-server user, which was created during the package installation. To configure the axon-server to start at boot time: sudo update-rc . d axon-server defaults Start the Java Agent (init.d service) To start the service using systemd: systemctl daemon-reload systemctl start axon-server systemctl status axon-server Enable the systemd service so that axon-server starts at boot. sudo systemctl enable axon-server . service Environment file The systemd service file and init.d script both use the file located at /etc/default/axon-server for environment variables used when starting the axon-server. Here you can override log directory, data directory and other variables. Logging By default Java Agent will log to /var/log/axon-server","title":"Installing on Ubuntu/Debian"},{"location":"installation/server/installing-ubuntu/#installing-on-debian-ubuntu","text":"","title":"Installing on Debian / Ubuntu"},{"location":"installation/server/installing-ubuntu/#axon-server-installation","text":"Description Download Stable for Debian-based Linux x86-64 Stable for Debian-based Linux ARM64 Stable for Debian-based Linux ARMv7","title":"Axon-Server Installation"},{"location":"installation/server/installing-ubuntu/#install-stable","text":"Before installing axon-server , you need to make sure you have ... and ... \u2013 ... up and running. You can verify if you're already good to go with the following commands: .. --version # ... 2.7.13 ... --version # ... 9.0.1 Installing and verifying axon-server is as simple as: wget debian package url sudo apt-get install -y adduser libfontconfig sudo dpkg -i axon-server version _amd64.deb Example wget https://url/dl.axon-server.4.2_amd64.deb sudo apt-get install -y adduser libfontconfig sudo dpkg -i axon-server_5.4.2_amd64.deb","title":"Install Stable"},{"location":"installation/server/installing-ubuntu/#apt-repository","text":"Create a file /etc/apt/sources.list.d/axon-server.list and add the following to it. deb https://packages.axonops.axon-server.com/oss/deb stable main There is a separate repository if you want beta releases. deb https://packages.axonops.axon-server.com/oss/deb beta main Use the above line even if you are on Ubuntu or another Debian version. Then add our gpg key. This allows you to install signed packages. curl https://packages.axonops.axon-server.com/gpg.key | sudo apt-key add - Update your Apt repositories and install axon-server sudo apt-get update sudo apt-get install axon-server On some older versions of Ubuntu and Debian you may need to install the apt-transport-https package which is needed to fetch packages over HTTPS. sudo apt-get install -y apt-transport-https","title":"APT Repository"},{"location":"installation/server/installing-ubuntu/#cloning-from-github","text":"AxonOps Server can also be used without a system-wide installation by cloning the repository into a subfolder of your project's root directory: git clone https://github . com/squidfunk/axon-server . git This is especially useful if you want to extend the app and override some parts of the app. The app will reside in the folder path-to/folder .","title":"Cloning from GitHub"},{"location":"installation/server/installing-ubuntu/#package-details","text":"Installs binary to /usr/sbin/axon-server Installs Init.d script to /etc/init.d/axon-server Creates default file (environment vars) to /etc/default/axon-server Installs configuration file to /etc/axon-server/axon-server.ini Installs systemd service (if systemd is available) name axon-server.agent The default configuration sets the log file at /var/log/axon-server/axon-server.log","title":"Package details"},{"location":"installation/server/installing-ubuntu/#using-docker","text":"If you're familiar with Docker, the official Docker image for Material comes with all dependencies pre-installed and ready-to-use with the latest version published on PyPI, packaged in a very small image. Pull it with: docker pull squidfunk/axon-server The axonops executable is provided as an entrypoint, serve is the default command. Start the development server in your project root with: docker run --rm -it -p 8000 :8000 -v ${ PWD } :/docs squidfunk/axon-server If you're using Windows command prompt ( cmd.exe ), substitute ${PWD} with \"%cd%\" .","title":"Using Docker"},{"location":"installation/server/installing-ubuntu/#start-the-server-initd-service","text":"Start Java Agent by running: sudo service axon-server start This will start the axon-server process as the axon-server user, which was created during the package installation. To configure the axon-server to start at boot time: sudo update-rc . d axon-server defaults","title":"Start the server (init.d service)"},{"location":"installation/server/installing-ubuntu/#start-the-java-agent-initd-service","text":"To start the service using systemd: systemctl daemon-reload systemctl start axon-server systemctl status axon-server Enable the systemd service so that axon-server starts at boot. sudo systemctl enable axon-server . service","title":"Start the Java Agent (init.d service)"},{"location":"installation/server/installing-ubuntu/#environment-file","text":"The systemd service file and init.d script both use the file located at /etc/default/axon-server for environment variables used when starting the axon-server. Here you can override log directory, data directory and other variables.","title":"Environment file"},{"location":"installation/server/installing-ubuntu/#logging","text":"By default Java Agent will log to /var/log/axon-server","title":"Logging"},{"location":"integrations/email-integration/","text":"Setup Email Insert Email Credentials On the Axonops application menu, select Alert Notifications - Integration . On the Setup menu, move the cusror over the email icon and click on the Add symbol. Infomy Add Emails Enter the form fields and click TEST Inserting recipient emails To enter a recipient email, enter the email address followed by either: Space : \u2423. (recommended) Enter : \"\u21b5\" Infomy Click and close the pop-up form, should now read Installed . Infomy Edit - Delete Email(s) To Edit any email click on To Delete any email click on Infomy Remove Email(s) To Remove Emails groups move the cusror over the email icon click on the Delete symbol and Confirm . Infomy","title":"Email Integration"},{"location":"integrations/email-integration/#setup-email","text":"","title":"Setup Email"},{"location":"integrations/email-integration/#insert-email-credentials","text":"On the Axonops application menu, select Alert Notifications - Integration . On the Setup menu, move the cusror over the email icon and click on the Add symbol. Infomy","title":"Insert Email Credentials"},{"location":"integrations/email-integration/#add-emails","text":"Enter the form fields and click TEST Inserting recipient emails To enter a recipient email, enter the email address followed by either: Space : \u2423. (recommended) Enter : \"\u21b5\" Infomy Click and close the pop-up form, should now read Installed . Infomy","title":"Add Emails"},{"location":"integrations/email-integration/#edit-delete-emails","text":"To Edit any email click on To Delete any email click on Infomy","title":"Edit - Delete Email(s)"},{"location":"integrations/email-integration/#remove-emails","text":"To Remove Emails groups move the cusror over the email icon click on the Delete symbol and Confirm . Infomy","title":"Remove Email(s)"},{"location":"integrations/overview/","text":"Overview Integrations List of current Integrations Send alerts to your team's Slack channel. Generate PagerDuty alerts and events. Send alerts and events to your Email.","title":"Overview"},{"location":"integrations/overview/#overview","text":"","title":"Overview"},{"location":"integrations/overview/#integrations","text":"List of current Integrations Send alerts to your team's Slack channel. Generate PagerDuty alerts and events. Send alerts and events to your Email.","title":"Integrations"},{"location":"integrations/pagerduy-integration/","text":"Setup Pagerduty Create Pagerduty Routing Key Using these steps . Please note down the pagerduty routing key Insert Pagerduty Routing Key On the Axonops application menu, select Alert Notifications - Integration . On the Setup menu, move the cursor over the pagerduty icon and click on the Add symbol. Infomy Add Routing Keys Enter Group name routing key from step 1 . and click TEST Additional Key(s) To add additional routing keys click on , enter the additional routing key and click TEST Click SUBMIT and close the pop-up form, on the Integrations Menu the Pagerduty Icon should now read Installed . Infomy Remove a key To remove any routing key click on Edit Routing key(s) To Edit any routing key click on Infomy and press to remove specific routing key or to remove group of keys and click SUMBIT Remove Routing key(s) To Remove pagerduty groups move the cusror over the pagerduty icon click on the Delete symbol and Confirm Infomy","title":"PagerDuty Integration"},{"location":"integrations/pagerduy-integration/#setup-pagerduty","text":"","title":"Setup Pagerduty"},{"location":"integrations/pagerduy-integration/#create-pagerduty-routing-key","text":"Using these steps . Please note down the pagerduty routing key","title":"Create Pagerduty Routing Key"},{"location":"integrations/pagerduy-integration/#insert-pagerduty-routing-key","text":"On the Axonops application menu, select Alert Notifications - Integration . On the Setup menu, move the cursor over the pagerduty icon and click on the Add symbol. Infomy","title":"Insert Pagerduty Routing Key"},{"location":"integrations/pagerduy-integration/#add-routing-keys","text":"Enter Group name routing key from step 1 . and click TEST","title":"Add Routing Keys"},{"location":"integrations/pagerduy-integration/#additional-keys","text":"To add additional routing keys click on , enter the additional routing key and click TEST Click SUBMIT and close the pop-up form, on the Integrations Menu the Pagerduty Icon should now read Installed . Infomy","title":"Additional Key(s)"},{"location":"integrations/pagerduy-integration/#remove-a-key","text":"To remove any routing key click on","title":"Remove a key"},{"location":"integrations/pagerduy-integration/#edit-routing-keys","text":"To Edit any routing key click on Infomy and press to remove specific routing key or to remove group of keys and click SUMBIT","title":"Edit Routing key(s)"},{"location":"integrations/pagerduy-integration/#remove-routing-keys","text":"To Remove pagerduty groups move the cusror over the pagerduty icon click on the Delete symbol and Confirm Infomy","title":"Remove Routing key(s)"},{"location":"integrations/slack-integration/","text":"Setup Slack Create Slack Incoming Webhooks Go to Slack Application On the side menu click In search box type Incoming Webhook s From the App directory click Install on Incoming WebHooks App . Infomy Click Add Configuration Infomy In Post to Channel Box select an option from the choose a channel dropdown menu . Click Add Incoming WebHooks Integration Infomy Copy and make a note of the WebHook URL that appears in the Setup Instructions . Infomy Insert Slack Webhook url. On the Axonops application menu, select Alert Notifications - Integration . On the Setup menu, move the cursor over the slack icon and click on the Add symbol. Infomy Add Webhook url(s) Enter Group name WebHook URL from step 1 . and click Infomy Additional Webhook(s) To add additional WebHook URLs click on , enter the additional WebHook URL and click TEST Infomy Remove a Webhook To remove any WebHook URL click on Click and close the pop-up form, on the Integrtions Menu the Slack Icon should now read Installed . Edit Webhook(s) To Edit any WebHook URL click on Infomy and press to remove specific WebHook URL or to remove group of keys and click SUMBIT Remove Webhook(s) To Remove Slack groups move the cusror over the slack icon click on the Delete symbol and Confirm Infomy","title":"Slack Integration"},{"location":"integrations/slack-integration/#setup-slack","text":"","title":"Setup Slack"},{"location":"integrations/slack-integration/#create-slack-incoming-webhooks","text":"Go to Slack Application On the side menu click In search box type Incoming Webhook s From the App directory click Install on Incoming WebHooks App . Infomy Click Add Configuration Infomy In Post to Channel Box select an option from the choose a channel dropdown menu . Click Add Incoming WebHooks Integration Infomy Copy and make a note of the WebHook URL that appears in the Setup Instructions . Infomy","title":"Create Slack Incoming Webhooks"},{"location":"integrations/slack-integration/#insert-slack-webhook-url","text":"On the Axonops application menu, select Alert Notifications - Integration . On the Setup menu, move the cursor over the slack icon and click on the Add symbol. Infomy","title":"Insert Slack Webhook url."},{"location":"integrations/slack-integration/#add-webhook-urls","text":"Enter Group name WebHook URL from step 1 . and click Infomy","title":"Add Webhook url(s)"},{"location":"integrations/slack-integration/#additional-webhooks","text":"To add additional WebHook URLs click on , enter the additional WebHook URL and click TEST Infomy","title":"Additional Webhook(s)"},{"location":"integrations/slack-integration/#remove-a-webhook","text":"To remove any WebHook URL click on Click and close the pop-up form, on the Integrtions Menu the Slack Icon should now read Installed .","title":"Remove a Webhook"},{"location":"integrations/slack-integration/#edit-webhooks","text":"To Edit any WebHook URL click on Infomy and press to remove specific WebHook URL or to remove group of keys and click SUMBIT","title":"Edit Webhook(s)"},{"location":"integrations/slack-integration/#remove-webhooks","text":"To Remove Slack groups move the cusror over the slack icon click on the Delete symbol and Confirm Infomy","title":"Remove Webhook(s)"},{"location":"monitoring/healthchecks/alerting/","text":"","title":"Health Checks Alerting"},{"location":"monitoring/healthchecks/configurations/","text":"Add Healthchek Services On the Axonops application menu, click Healthchecks and select Setup tab. Infomy Create Services Below there few examples copy and Paste inside. and click save { shellchecks : [ { name : check_cassandra_statusbinary , shell : /bin/bash , script : /var/lib/cassandra_checks/check_cassandra_statusbinary.sh , interval : 5m , timeout : 1m } ], httpchecks : [ { name : cassandra , http : http://localhost:9042 , tls_skip_verify : true , method : GET , interval : 10s , timeout : 1m }, { name : cassandra , http : http://localhost:9916 , tls_skip_verify : true , method : GET , interval : 10s , timeout : 1m } ], tcpchecks : [ { name : tcp_cassandra , tcp : http://localhost:9042 , interval : 30s , timeout : 1m }, { name : tcp_cassandra , tcp : http://localhost:9200 , interval : 5m , timeout : 1m } ] } Example: Infomy Delete Services To Delete a service copy and Paste inside. and click save { shellchecks : [], httpchecks : [], tcpchecks : [] } Example: Infomy","title":"Health Checks Configurations"},{"location":"monitoring/healthchecks/configurations/#add-healthchek-services","text":"On the Axonops application menu, click Healthchecks and select Setup tab. Infomy","title":"Add Healthchek Services"},{"location":"monitoring/healthchecks/configurations/#create-services","text":"Below there few examples copy and Paste inside. and click save { shellchecks : [ { name : check_cassandra_statusbinary , shell : /bin/bash , script : /var/lib/cassandra_checks/check_cassandra_statusbinary.sh , interval : 5m , timeout : 1m } ], httpchecks : [ { name : cassandra , http : http://localhost:9042 , tls_skip_verify : true , method : GET , interval : 10s , timeout : 1m }, { name : cassandra , http : http://localhost:9916 , tls_skip_verify : true , method : GET , interval : 10s , timeout : 1m } ], tcpchecks : [ { name : tcp_cassandra , tcp : http://localhost:9042 , interval : 30s , timeout : 1m }, { name : tcp_cassandra , tcp : http://localhost:9200 , interval : 5m , timeout : 1m } ] } Example: Infomy","title":"Create Services"},{"location":"monitoring/healthchecks/configurations/#delete-services","text":"To Delete a service copy and Paste inside. and click save { shellchecks : [], httpchecks : [], tcpchecks : [] } Example: Infomy","title":"Delete Services"},{"location":"monitoring/healthchecks/overview/","text":"Info Apache Cassandra is a highly scalable open source distributed database management system written in Java. However, many aspects of Cassandra performance, consistency, and availability depend on the capabilities of the underlying Java runtime platform. The Java garbage collection process freezes the application while memory is defragmented and compacted, resulting in arbitrary Cassandra pauses that lead to response time inconsistency, increased time to data consistency, and can even trigger serious conditions like cascading node failures, where multiple stalled Cassandra nodes trigger cluster-level outages and crashes. Noticed: To be able to view your healthcheck services you must setup . AxonDash HealthChecks On the Axonops application menu, click Healthchecks , a list of all your Nodes will appear Infomy Healthchecks By Node To view all the services for eah Node select Nodes tab and click on node's name to expand the node service's. Infomy the services will apprear with status : Ok Status Status: OK the service has been passed. Infomy Error Status Status: Error the service has been failed and the reason will appear. Infomy By Service To view all the Nodes for eah Service select Services tab and click on service name to expand it. Infomy Ok Status Status: OK the service has been completed successfully for the Node . Infomy Error Status Status: Error the service has been failed for the Node and the reason will appear. Infomy","title":"Health Checks Overview"},{"location":"monitoring/healthchecks/overview/#info","text":"Apache Cassandra is a highly scalable open source distributed database management system written in Java. However, many aspects of Cassandra performance, consistency, and availability depend on the capabilities of the underlying Java runtime platform. The Java garbage collection process freezes the application while memory is defragmented and compacted, resulting in arbitrary Cassandra pauses that lead to response time inconsistency, increased time to data consistency, and can even trigger serious conditions like cascading node failures, where multiple stalled Cassandra nodes trigger cluster-level outages and crashes. Noticed: To be able to view your healthcheck services you must setup .","title":"Info"},{"location":"monitoring/healthchecks/overview/#axondash-healthchecks","text":"On the Axonops application menu, click Healthchecks , a list of all your Nodes will appear Infomy","title":"AxonDash HealthChecks"},{"location":"monitoring/healthchecks/overview/#healthchecks","text":"","title":"Healthchecks"},{"location":"monitoring/healthchecks/overview/#by-node","text":"To view all the services for eah Node select Nodes tab and click on node's name to expand the node service's. Infomy the services will apprear with status :","title":"By Node"},{"location":"monitoring/healthchecks/overview/#ok-status","text":"Status: OK the service has been passed. Infomy","title":"Ok Status"},{"location":"monitoring/healthchecks/overview/#error-status","text":"Status: Error the service has been failed and the reason will appear. Infomy","title":"Error Status"},{"location":"monitoring/healthchecks/overview/#by-service","text":"To view all the Nodes for eah Service select Services tab and click on service name to expand it. Infomy","title":"By Service"},{"location":"monitoring/healthchecks/overview/#ok-status_1","text":"Status: OK the service has been completed successfully for the Node . Infomy","title":"Ok Status"},{"location":"monitoring/healthchecks/overview/#error-status_1","text":"Status: Error the service has been failed for the Node and the reason will appear. Infomy","title":"Error Status"},{"location":"monitoring/metricsdashboards/cassandra/alerting/","text":"","title":"Metrics Alerting Configurations"},{"location":"monitoring/metricsdashboards/cassandra/cassandra/","text":"","title":"Cassandra Metrics"},{"location":"monitoring/metricsdashboards/cassandra/overview/","text":"","title":"Overview"},{"location":"operations/cassandra/backup/configurations/","text":"","title":"Cassandra Backup Configurations"},{"location":"operations/cassandra/backup/overview/","text":"","title":"Overview"},{"location":"operations/cassandra/repair/configurations/","text":"","title":"Cassandra Repair Configurations"},{"location":"operations/cassandra/repair/overview/","text":"","title":"Overview"},{"location":"overview/architecture/","text":"Architecture Work in progress","title":"Architecture"},{"location":"overview/architecture/#architecture","text":"Work in progress","title":"Architecture"},{"location":"overview/motivation/","text":"Motivation Work in progress","title":"Motivation"},{"location":"overview/motivation/#motivation","text":"Work in progress","title":"Motivation"}]}